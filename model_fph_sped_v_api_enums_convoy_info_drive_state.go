/*
SpedV API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FPHSpedVAPIEnumsConvoyInfoDriveState   0 = NoGame  1 = Paused  2 = InDrive  3 = OMSI  4 = StellwerkSim  5 = Bot  6 = SimRail_Train  7 = SimRail_Dispatch
type FPHSpedVAPIEnumsConvoyInfoDriveState int32

// List of FPH.SpedV.API.Enums.ConvoyInfoDriveState
const (
	_0 FPHSpedVAPIEnumsConvoyInfoDriveState = 0
	_1 FPHSpedVAPIEnumsConvoyInfoDriveState = 1
	_2 FPHSpedVAPIEnumsConvoyInfoDriveState = 2
	_3 FPHSpedVAPIEnumsConvoyInfoDriveState = 3
	_4 FPHSpedVAPIEnumsConvoyInfoDriveState = 4
	_5 FPHSpedVAPIEnumsConvoyInfoDriveState = 5
	_6 FPHSpedVAPIEnumsConvoyInfoDriveState = 6
	_7 FPHSpedVAPIEnumsConvoyInfoDriveState = 7
)

// All allowed values of FPHSpedVAPIEnumsConvoyInfoDriveState enum
var AllowedFPHSpedVAPIEnumsConvoyInfoDriveStateEnumValues = []FPHSpedVAPIEnumsConvoyInfoDriveState{
	0,
	1,
	2,
	3,
	4,
	5,
	6,
	7,
}

func (v *FPHSpedVAPIEnumsConvoyInfoDriveState) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FPHSpedVAPIEnumsConvoyInfoDriveState(value)
	for _, existing := range AllowedFPHSpedVAPIEnumsConvoyInfoDriveStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FPHSpedVAPIEnumsConvoyInfoDriveState", value)
}

// NewFPHSpedVAPIEnumsConvoyInfoDriveStateFromValue returns a pointer to a valid FPHSpedVAPIEnumsConvoyInfoDriveState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFPHSpedVAPIEnumsConvoyInfoDriveStateFromValue(v int32) (*FPHSpedVAPIEnumsConvoyInfoDriveState, error) {
	ev := FPHSpedVAPIEnumsConvoyInfoDriveState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FPHSpedVAPIEnumsConvoyInfoDriveState: valid values are %v", v, AllowedFPHSpedVAPIEnumsConvoyInfoDriveStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FPHSpedVAPIEnumsConvoyInfoDriveState) IsValid() bool {
	for _, existing := range AllowedFPHSpedVAPIEnumsConvoyInfoDriveStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FPH.SpedV.API.Enums.ConvoyInfoDriveState value
func (v FPHSpedVAPIEnumsConvoyInfoDriveState) Ptr() *FPHSpedVAPIEnumsConvoyInfoDriveState {
	return &v
}

type NullableFPHSpedVAPIEnumsConvoyInfoDriveState struct {
	value *FPHSpedVAPIEnumsConvoyInfoDriveState
	isSet bool
}

func (v NullableFPHSpedVAPIEnumsConvoyInfoDriveState) Get() *FPHSpedVAPIEnumsConvoyInfoDriveState {
	return v.value
}

func (v *NullableFPHSpedVAPIEnumsConvoyInfoDriveState) Set(val *FPHSpedVAPIEnumsConvoyInfoDriveState) {
	v.value = val
	v.isSet = true
}

func (v NullableFPHSpedVAPIEnumsConvoyInfoDriveState) IsSet() bool {
	return v.isSet
}

func (v *NullableFPHSpedVAPIEnumsConvoyInfoDriveState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFPHSpedVAPIEnumsConvoyInfoDriveState(val *FPHSpedVAPIEnumsConvoyInfoDriveState) *NullableFPHSpedVAPIEnumsConvoyInfoDriveState {
	return &NullableFPHSpedVAPIEnumsConvoyInfoDriveState{value: val, isSet: true}
}

func (v NullableFPHSpedVAPIEnumsConvoyInfoDriveState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFPHSpedVAPIEnumsConvoyInfoDriveState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

