/*
SpedV API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FPHSpedVAPIObjectsSpeditionsRankPermission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FPHSpedVAPIObjectsSpeditionsRankPermission{}

// FPHSpedVAPIObjectsSpeditionsRankPermission struct for FPHSpedVAPIObjectsSpeditionsRankPermission
type FPHSpedVAPIObjectsSpeditionsRankPermission struct {
	Permission NullableFPHSpedVAPIObjectsSpeditionsPermission `json:"permission"`
	CanGive bool `json:"canGive"`
}

type _FPHSpedVAPIObjectsSpeditionsRankPermission FPHSpedVAPIObjectsSpeditionsRankPermission

// NewFPHSpedVAPIObjectsSpeditionsRankPermission instantiates a new FPHSpedVAPIObjectsSpeditionsRankPermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFPHSpedVAPIObjectsSpeditionsRankPermission(permission NullableFPHSpedVAPIObjectsSpeditionsPermission, canGive bool) *FPHSpedVAPIObjectsSpeditionsRankPermission {
	this := FPHSpedVAPIObjectsSpeditionsRankPermission{}
	this.Permission = permission
	this.CanGive = canGive
	return &this
}

// NewFPHSpedVAPIObjectsSpeditionsRankPermissionWithDefaults instantiates a new FPHSpedVAPIObjectsSpeditionsRankPermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFPHSpedVAPIObjectsSpeditionsRankPermissionWithDefaults() *FPHSpedVAPIObjectsSpeditionsRankPermission {
	this := FPHSpedVAPIObjectsSpeditionsRankPermission{}
	return &this
}

// GetPermission returns the Permission field value
// If the value is explicit nil, the zero value for FPHSpedVAPIObjectsSpeditionsPermission will be returned
func (o *FPHSpedVAPIObjectsSpeditionsRankPermission) GetPermission() FPHSpedVAPIObjectsSpeditionsPermission {
	if o == nil || o.Permission.Get() == nil {
		var ret FPHSpedVAPIObjectsSpeditionsPermission
		return ret
	}

	return *o.Permission.Get()
}

// GetPermissionOk returns a tuple with the Permission field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FPHSpedVAPIObjectsSpeditionsRankPermission) GetPermissionOk() (*FPHSpedVAPIObjectsSpeditionsPermission, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permission.Get(), o.Permission.IsSet()
}

// SetPermission sets field value
func (o *FPHSpedVAPIObjectsSpeditionsRankPermission) SetPermission(v FPHSpedVAPIObjectsSpeditionsPermission) {
	o.Permission.Set(&v)
}

// GetCanGive returns the CanGive field value
func (o *FPHSpedVAPIObjectsSpeditionsRankPermission) GetCanGive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanGive
}

// GetCanGiveOk returns a tuple with the CanGive field value
// and a boolean to check if the value has been set.
func (o *FPHSpedVAPIObjectsSpeditionsRankPermission) GetCanGiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanGive, true
}

// SetCanGive sets field value
func (o *FPHSpedVAPIObjectsSpeditionsRankPermission) SetCanGive(v bool) {
	o.CanGive = v
}

func (o FPHSpedVAPIObjectsSpeditionsRankPermission) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FPHSpedVAPIObjectsSpeditionsRankPermission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["permission"] = o.Permission.Get()
	toSerialize["canGive"] = o.CanGive
	return toSerialize, nil
}

func (o *FPHSpedVAPIObjectsSpeditionsRankPermission) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"permission",
		"canGive",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFPHSpedVAPIObjectsSpeditionsRankPermission := _FPHSpedVAPIObjectsSpeditionsRankPermission{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFPHSpedVAPIObjectsSpeditionsRankPermission)

	if err != nil {
		return err
	}

	*o = FPHSpedVAPIObjectsSpeditionsRankPermission(varFPHSpedVAPIObjectsSpeditionsRankPermission)

	return err
}

type NullableFPHSpedVAPIObjectsSpeditionsRankPermission struct {
	value *FPHSpedVAPIObjectsSpeditionsRankPermission
	isSet bool
}

func (v NullableFPHSpedVAPIObjectsSpeditionsRankPermission) Get() *FPHSpedVAPIObjectsSpeditionsRankPermission {
	return v.value
}

func (v *NullableFPHSpedVAPIObjectsSpeditionsRankPermission) Set(val *FPHSpedVAPIObjectsSpeditionsRankPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableFPHSpedVAPIObjectsSpeditionsRankPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableFPHSpedVAPIObjectsSpeditionsRankPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFPHSpedVAPIObjectsSpeditionsRankPermission(val *FPHSpedVAPIObjectsSpeditionsRankPermission) *NullableFPHSpedVAPIObjectsSpeditionsRankPermission {
	return &NullableFPHSpedVAPIObjectsSpeditionsRankPermission{value: val, isSet: true}
}

func (v NullableFPHSpedVAPIObjectsSpeditionsRankPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFPHSpedVAPIObjectsSpeditionsRankPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


