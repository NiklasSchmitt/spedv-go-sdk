/*
SpedV API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FPHSpedVAPIEnumsJobPartState   0 = WaitingDriver  1 = WaitingPrecondition  2 = WaitingDrive  3 = InDrive  4 = Finished  -1 = NotAvaliable
type FPHSpedVAPIEnumsJobPartState int32

// List of FPH.SpedV.API.Enums.JobPartState
const (
	_0 FPHSpedVAPIEnumsJobPartState = 0
	_1 FPHSpedVAPIEnumsJobPartState = 1
	_2 FPHSpedVAPIEnumsJobPartState = 2
	_3 FPHSpedVAPIEnumsJobPartState = 3
	_4 FPHSpedVAPIEnumsJobPartState = 4
	_MINUS_1 FPHSpedVAPIEnumsJobPartState = -1
)

// All allowed values of FPHSpedVAPIEnumsJobPartState enum
var AllowedFPHSpedVAPIEnumsJobPartStateEnumValues = []FPHSpedVAPIEnumsJobPartState{
	0,
	1,
	2,
	3,
	4,
	-1,
}

func (v *FPHSpedVAPIEnumsJobPartState) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FPHSpedVAPIEnumsJobPartState(value)
	for _, existing := range AllowedFPHSpedVAPIEnumsJobPartStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FPHSpedVAPIEnumsJobPartState", value)
}

// NewFPHSpedVAPIEnumsJobPartStateFromValue returns a pointer to a valid FPHSpedVAPIEnumsJobPartState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFPHSpedVAPIEnumsJobPartStateFromValue(v int32) (*FPHSpedVAPIEnumsJobPartState, error) {
	ev := FPHSpedVAPIEnumsJobPartState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FPHSpedVAPIEnumsJobPartState: valid values are %v", v, AllowedFPHSpedVAPIEnumsJobPartStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FPHSpedVAPIEnumsJobPartState) IsValid() bool {
	for _, existing := range AllowedFPHSpedVAPIEnumsJobPartStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FPH.SpedV.API.Enums.JobPartState value
func (v FPHSpedVAPIEnumsJobPartState) Ptr() *FPHSpedVAPIEnumsJobPartState {
	return &v
}

type NullableFPHSpedVAPIEnumsJobPartState struct {
	value *FPHSpedVAPIEnumsJobPartState
	isSet bool
}

func (v NullableFPHSpedVAPIEnumsJobPartState) Get() *FPHSpedVAPIEnumsJobPartState {
	return v.value
}

func (v *NullableFPHSpedVAPIEnumsJobPartState) Set(val *FPHSpedVAPIEnumsJobPartState) {
	v.value = val
	v.isSet = true
}

func (v NullableFPHSpedVAPIEnumsJobPartState) IsSet() bool {
	return v.isSet
}

func (v *NullableFPHSpedVAPIEnumsJobPartState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFPHSpedVAPIEnumsJobPartState(val *FPHSpedVAPIEnumsJobPartState) *NullableFPHSpedVAPIEnumsJobPartState {
	return &NullableFPHSpedVAPIEnumsJobPartState{value: val, isSet: true}
}

func (v NullableFPHSpedVAPIEnumsJobPartState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFPHSpedVAPIEnumsJobPartState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

