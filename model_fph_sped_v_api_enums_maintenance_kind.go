/*
SpedV API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FPHSpedVAPIEnumsMaintenanceKind   0 = Engine  1 = OszilationDamper  2 = Stabilizer  3 = StoneChip  4 = Transmission  5 = Wishbone  6 = BrakePads  7 = BrakeDiscs  8 = EngineMaintenance  9 = TireChange  10 = MainCheck  11 = SafetyCheck  12 = SaddlePlate  13 = AirPressureUnit  14 = Alternator  15 = BrakeVentil  -1 = NotSet
type FPHSpedVAPIEnumsMaintenanceKind int32

// List of FPH.SpedV.API.Enums.MaintenanceKind
const (
	_0 FPHSpedVAPIEnumsMaintenanceKind = 0
	_1 FPHSpedVAPIEnumsMaintenanceKind = 1
	_2 FPHSpedVAPIEnumsMaintenanceKind = 2
	_3 FPHSpedVAPIEnumsMaintenanceKind = 3
	_4 FPHSpedVAPIEnumsMaintenanceKind = 4
	_5 FPHSpedVAPIEnumsMaintenanceKind = 5
	_6 FPHSpedVAPIEnumsMaintenanceKind = 6
	_7 FPHSpedVAPIEnumsMaintenanceKind = 7
	_8 FPHSpedVAPIEnumsMaintenanceKind = 8
	_9 FPHSpedVAPIEnumsMaintenanceKind = 9
	_10 FPHSpedVAPIEnumsMaintenanceKind = 10
	_11 FPHSpedVAPIEnumsMaintenanceKind = 11
	_12 FPHSpedVAPIEnumsMaintenanceKind = 12
	_13 FPHSpedVAPIEnumsMaintenanceKind = 13
	_14 FPHSpedVAPIEnumsMaintenanceKind = 14
	_15 FPHSpedVAPIEnumsMaintenanceKind = 15
	_MINUS_1 FPHSpedVAPIEnumsMaintenanceKind = -1
)

// All allowed values of FPHSpedVAPIEnumsMaintenanceKind enum
var AllowedFPHSpedVAPIEnumsMaintenanceKindEnumValues = []FPHSpedVAPIEnumsMaintenanceKind{
	0,
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	9,
	10,
	11,
	12,
	13,
	14,
	15,
	-1,
}

func (v *FPHSpedVAPIEnumsMaintenanceKind) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FPHSpedVAPIEnumsMaintenanceKind(value)
	for _, existing := range AllowedFPHSpedVAPIEnumsMaintenanceKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FPHSpedVAPIEnumsMaintenanceKind", value)
}

// NewFPHSpedVAPIEnumsMaintenanceKindFromValue returns a pointer to a valid FPHSpedVAPIEnumsMaintenanceKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFPHSpedVAPIEnumsMaintenanceKindFromValue(v int32) (*FPHSpedVAPIEnumsMaintenanceKind, error) {
	ev := FPHSpedVAPIEnumsMaintenanceKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FPHSpedVAPIEnumsMaintenanceKind: valid values are %v", v, AllowedFPHSpedVAPIEnumsMaintenanceKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FPHSpedVAPIEnumsMaintenanceKind) IsValid() bool {
	for _, existing := range AllowedFPHSpedVAPIEnumsMaintenanceKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FPH.SpedV.API.Enums.MaintenanceKind value
func (v FPHSpedVAPIEnumsMaintenanceKind) Ptr() *FPHSpedVAPIEnumsMaintenanceKind {
	return &v
}

type NullableFPHSpedVAPIEnumsMaintenanceKind struct {
	value *FPHSpedVAPIEnumsMaintenanceKind
	isSet bool
}

func (v NullableFPHSpedVAPIEnumsMaintenanceKind) Get() *FPHSpedVAPIEnumsMaintenanceKind {
	return v.value
}

func (v *NullableFPHSpedVAPIEnumsMaintenanceKind) Set(val *FPHSpedVAPIEnumsMaintenanceKind) {
	v.value = val
	v.isSet = true
}

func (v NullableFPHSpedVAPIEnumsMaintenanceKind) IsSet() bool {
	return v.isSet
}

func (v *NullableFPHSpedVAPIEnumsMaintenanceKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFPHSpedVAPIEnumsMaintenanceKind(val *FPHSpedVAPIEnumsMaintenanceKind) *NullableFPHSpedVAPIEnumsMaintenanceKind {
	return &NullableFPHSpedVAPIEnumsMaintenanceKind{value: val, isSet: true}
}

func (v NullableFPHSpedVAPIEnumsMaintenanceKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFPHSpedVAPIEnumsMaintenanceKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

