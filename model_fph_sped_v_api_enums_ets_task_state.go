/*
SpedV API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FPHSpedVAPIEnumsETSTaskState   0 = InDrive  1 = Done  2 = Settled  3 = Fail  4 = AdminCheck  5 = Paused  6 = Cancelled  7 = Invalid  -1 = NotAvaliable
type FPHSpedVAPIEnumsETSTaskState int32

// List of FPH.SpedV.API.Enums.ETSTaskState
const (
	_0 FPHSpedVAPIEnumsETSTaskState = 0
	_1 FPHSpedVAPIEnumsETSTaskState = 1
	_2 FPHSpedVAPIEnumsETSTaskState = 2
	_3 FPHSpedVAPIEnumsETSTaskState = 3
	_4 FPHSpedVAPIEnumsETSTaskState = 4
	_5 FPHSpedVAPIEnumsETSTaskState = 5
	_6 FPHSpedVAPIEnumsETSTaskState = 6
	_7 FPHSpedVAPIEnumsETSTaskState = 7
	_MINUS_1 FPHSpedVAPIEnumsETSTaskState = -1
)

// All allowed values of FPHSpedVAPIEnumsETSTaskState enum
var AllowedFPHSpedVAPIEnumsETSTaskStateEnumValues = []FPHSpedVAPIEnumsETSTaskState{
	0,
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	-1,
}

func (v *FPHSpedVAPIEnumsETSTaskState) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FPHSpedVAPIEnumsETSTaskState(value)
	for _, existing := range AllowedFPHSpedVAPIEnumsETSTaskStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FPHSpedVAPIEnumsETSTaskState", value)
}

// NewFPHSpedVAPIEnumsETSTaskStateFromValue returns a pointer to a valid FPHSpedVAPIEnumsETSTaskState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFPHSpedVAPIEnumsETSTaskStateFromValue(v int32) (*FPHSpedVAPIEnumsETSTaskState, error) {
	ev := FPHSpedVAPIEnumsETSTaskState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FPHSpedVAPIEnumsETSTaskState: valid values are %v", v, AllowedFPHSpedVAPIEnumsETSTaskStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FPHSpedVAPIEnumsETSTaskState) IsValid() bool {
	for _, existing := range AllowedFPHSpedVAPIEnumsETSTaskStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FPH.SpedV.API.Enums.ETSTaskState value
func (v FPHSpedVAPIEnumsETSTaskState) Ptr() *FPHSpedVAPIEnumsETSTaskState {
	return &v
}

type NullableFPHSpedVAPIEnumsETSTaskState struct {
	value *FPHSpedVAPIEnumsETSTaskState
	isSet bool
}

func (v NullableFPHSpedVAPIEnumsETSTaskState) Get() *FPHSpedVAPIEnumsETSTaskState {
	return v.value
}

func (v *NullableFPHSpedVAPIEnumsETSTaskState) Set(val *FPHSpedVAPIEnumsETSTaskState) {
	v.value = val
	v.isSet = true
}

func (v NullableFPHSpedVAPIEnumsETSTaskState) IsSet() bool {
	return v.isSet
}

func (v *NullableFPHSpedVAPIEnumsETSTaskState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFPHSpedVAPIEnumsETSTaskState(val *FPHSpedVAPIEnumsETSTaskState) *NullableFPHSpedVAPIEnumsETSTaskState {
	return &NullableFPHSpedVAPIEnumsETSTaskState{value: val, isSet: true}
}

func (v NullableFPHSpedVAPIEnumsETSTaskState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFPHSpedVAPIEnumsETSTaskState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

