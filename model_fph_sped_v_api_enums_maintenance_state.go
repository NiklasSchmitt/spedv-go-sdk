/*
SpedV API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FPHSpedVAPIEnumsMaintenanceState   0 = Enqueued  11 = InDrive  12 = NotInOwnedBranch  13 = OtherMaintenanceActive  21 = MissingSpareParts  22 = NotEnoughMaintenancePlaces  91 = Processing  92 = ProcessingButDelayed  93 = Finished  -1 = NotSet
type FPHSpedVAPIEnumsMaintenanceState int32

// List of FPH.SpedV.API.Enums.MaintenanceState
const (
	_0 FPHSpedVAPIEnumsMaintenanceState = 0
	_11 FPHSpedVAPIEnumsMaintenanceState = 11
	_12 FPHSpedVAPIEnumsMaintenanceState = 12
	_13 FPHSpedVAPIEnumsMaintenanceState = 13
	_21 FPHSpedVAPIEnumsMaintenanceState = 21
	_22 FPHSpedVAPIEnumsMaintenanceState = 22
	_91 FPHSpedVAPIEnumsMaintenanceState = 91
	_92 FPHSpedVAPIEnumsMaintenanceState = 92
	_93 FPHSpedVAPIEnumsMaintenanceState = 93
	_MINUS_1 FPHSpedVAPIEnumsMaintenanceState = -1
)

// All allowed values of FPHSpedVAPIEnumsMaintenanceState enum
var AllowedFPHSpedVAPIEnumsMaintenanceStateEnumValues = []FPHSpedVAPIEnumsMaintenanceState{
	0,
	11,
	12,
	13,
	21,
	22,
	91,
	92,
	93,
	-1,
}

func (v *FPHSpedVAPIEnumsMaintenanceState) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FPHSpedVAPIEnumsMaintenanceState(value)
	for _, existing := range AllowedFPHSpedVAPIEnumsMaintenanceStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FPHSpedVAPIEnumsMaintenanceState", value)
}

// NewFPHSpedVAPIEnumsMaintenanceStateFromValue returns a pointer to a valid FPHSpedVAPIEnumsMaintenanceState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFPHSpedVAPIEnumsMaintenanceStateFromValue(v int32) (*FPHSpedVAPIEnumsMaintenanceState, error) {
	ev := FPHSpedVAPIEnumsMaintenanceState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FPHSpedVAPIEnumsMaintenanceState: valid values are %v", v, AllowedFPHSpedVAPIEnumsMaintenanceStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FPHSpedVAPIEnumsMaintenanceState) IsValid() bool {
	for _, existing := range AllowedFPHSpedVAPIEnumsMaintenanceStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FPH.SpedV.API.Enums.MaintenanceState value
func (v FPHSpedVAPIEnumsMaintenanceState) Ptr() *FPHSpedVAPIEnumsMaintenanceState {
	return &v
}

type NullableFPHSpedVAPIEnumsMaintenanceState struct {
	value *FPHSpedVAPIEnumsMaintenanceState
	isSet bool
}

func (v NullableFPHSpedVAPIEnumsMaintenanceState) Get() *FPHSpedVAPIEnumsMaintenanceState {
	return v.value
}

func (v *NullableFPHSpedVAPIEnumsMaintenanceState) Set(val *FPHSpedVAPIEnumsMaintenanceState) {
	v.value = val
	v.isSet = true
}

func (v NullableFPHSpedVAPIEnumsMaintenanceState) IsSet() bool {
	return v.isSet
}

func (v *NullableFPHSpedVAPIEnumsMaintenanceState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFPHSpedVAPIEnumsMaintenanceState(val *FPHSpedVAPIEnumsMaintenanceState) *NullableFPHSpedVAPIEnumsMaintenanceState {
	return &NullableFPHSpedVAPIEnumsMaintenanceState{value: val, isSet: true}
}

func (v NullableFPHSpedVAPIEnumsMaintenanceState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFPHSpedVAPIEnumsMaintenanceState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

