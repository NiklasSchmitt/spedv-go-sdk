/*
SpedV API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FPHSpedVAPIObjectsMapsCompanyCity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FPHSpedVAPIObjectsMapsCompanyCity{}

// FPHSpedVAPIObjectsMapsCompanyCity struct for FPHSpedVAPIObjectsMapsCompanyCity
type FPHSpedVAPIObjectsMapsCompanyCity struct {
	Id int32 `json:"id"`
	Company NullableFPHSpedVAPIObjectsMapsCompany `json:"company"`
	City NullableFPHSpedVAPIObjectsMapsCity `json:"city"`
	Map NullableFPHSpedVAPIObjectsMapsMap `json:"map"`
	SupportsDouble bool `json:"supportsDouble"`
	SupportsTriple bool `json:"supportsTriple"`
	IsDeleted bool `json:"isDeleted"`
	XCoord NullableFloat64 `json:"x_Coord"`
	ZCoord NullableFloat64 `json:"z_Coord"`
	DisabledOnMaps []FPHSpedVAPIObjectsMapsMap `json:"disabledOnMaps"`
}

type _FPHSpedVAPIObjectsMapsCompanyCity FPHSpedVAPIObjectsMapsCompanyCity

// NewFPHSpedVAPIObjectsMapsCompanyCity instantiates a new FPHSpedVAPIObjectsMapsCompanyCity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFPHSpedVAPIObjectsMapsCompanyCity(id int32, company NullableFPHSpedVAPIObjectsMapsCompany, city NullableFPHSpedVAPIObjectsMapsCity, map_ NullableFPHSpedVAPIObjectsMapsMap, supportsDouble bool, supportsTriple bool, isDeleted bool, xCoord NullableFloat64, zCoord NullableFloat64, disabledOnMaps []FPHSpedVAPIObjectsMapsMap) *FPHSpedVAPIObjectsMapsCompanyCity {
	this := FPHSpedVAPIObjectsMapsCompanyCity{}
	this.Id = id
	this.Company = company
	this.City = city
	this.Map = map_
	this.SupportsDouble = supportsDouble
	this.SupportsTriple = supportsTriple
	this.IsDeleted = isDeleted
	this.XCoord = xCoord
	this.ZCoord = zCoord
	this.DisabledOnMaps = disabledOnMaps
	return &this
}

// NewFPHSpedVAPIObjectsMapsCompanyCityWithDefaults instantiates a new FPHSpedVAPIObjectsMapsCompanyCity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFPHSpedVAPIObjectsMapsCompanyCityWithDefaults() *FPHSpedVAPIObjectsMapsCompanyCity {
	this := FPHSpedVAPIObjectsMapsCompanyCity{}
	return &this
}

// GetId returns the Id field value
func (o *FPHSpedVAPIObjectsMapsCompanyCity) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FPHSpedVAPIObjectsMapsCompanyCity) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FPHSpedVAPIObjectsMapsCompanyCity) SetId(v int32) {
	o.Id = v
}

// GetCompany returns the Company field value
// If the value is explicit nil, the zero value for FPHSpedVAPIObjectsMapsCompany will be returned
func (o *FPHSpedVAPIObjectsMapsCompanyCity) GetCompany() FPHSpedVAPIObjectsMapsCompany {
	if o == nil || o.Company.Get() == nil {
		var ret FPHSpedVAPIObjectsMapsCompany
		return ret
	}

	return *o.Company.Get()
}

// GetCompanyOk returns a tuple with the Company field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FPHSpedVAPIObjectsMapsCompanyCity) GetCompanyOk() (*FPHSpedVAPIObjectsMapsCompany, bool) {
	if o == nil {
		return nil, false
	}
	return o.Company.Get(), o.Company.IsSet()
}

// SetCompany sets field value
func (o *FPHSpedVAPIObjectsMapsCompanyCity) SetCompany(v FPHSpedVAPIObjectsMapsCompany) {
	o.Company.Set(&v)
}

// GetCity returns the City field value
// If the value is explicit nil, the zero value for FPHSpedVAPIObjectsMapsCity will be returned
func (o *FPHSpedVAPIObjectsMapsCompanyCity) GetCity() FPHSpedVAPIObjectsMapsCity {
	if o == nil || o.City.Get() == nil {
		var ret FPHSpedVAPIObjectsMapsCity
		return ret
	}

	return *o.City.Get()
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FPHSpedVAPIObjectsMapsCompanyCity) GetCityOk() (*FPHSpedVAPIObjectsMapsCity, bool) {
	if o == nil {
		return nil, false
	}
	return o.City.Get(), o.City.IsSet()
}

// SetCity sets field value
func (o *FPHSpedVAPIObjectsMapsCompanyCity) SetCity(v FPHSpedVAPIObjectsMapsCity) {
	o.City.Set(&v)
}

// GetMap returns the Map field value
// If the value is explicit nil, the zero value for FPHSpedVAPIObjectsMapsMap will be returned
func (o *FPHSpedVAPIObjectsMapsCompanyCity) GetMap() FPHSpedVAPIObjectsMapsMap {
	if o == nil || o.Map.Get() == nil {
		var ret FPHSpedVAPIObjectsMapsMap
		return ret
	}

	return *o.Map.Get()
}

// GetMapOk returns a tuple with the Map field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FPHSpedVAPIObjectsMapsCompanyCity) GetMapOk() (*FPHSpedVAPIObjectsMapsMap, bool) {
	if o == nil {
		return nil, false
	}
	return o.Map.Get(), o.Map.IsSet()
}

// SetMap sets field value
func (o *FPHSpedVAPIObjectsMapsCompanyCity) SetMap(v FPHSpedVAPIObjectsMapsMap) {
	o.Map.Set(&v)
}

// GetSupportsDouble returns the SupportsDouble field value
func (o *FPHSpedVAPIObjectsMapsCompanyCity) GetSupportsDouble() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SupportsDouble
}

// GetSupportsDoubleOk returns a tuple with the SupportsDouble field value
// and a boolean to check if the value has been set.
func (o *FPHSpedVAPIObjectsMapsCompanyCity) GetSupportsDoubleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SupportsDouble, true
}

// SetSupportsDouble sets field value
func (o *FPHSpedVAPIObjectsMapsCompanyCity) SetSupportsDouble(v bool) {
	o.SupportsDouble = v
}

// GetSupportsTriple returns the SupportsTriple field value
func (o *FPHSpedVAPIObjectsMapsCompanyCity) GetSupportsTriple() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SupportsTriple
}

// GetSupportsTripleOk returns a tuple with the SupportsTriple field value
// and a boolean to check if the value has been set.
func (o *FPHSpedVAPIObjectsMapsCompanyCity) GetSupportsTripleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SupportsTriple, true
}

// SetSupportsTriple sets field value
func (o *FPHSpedVAPIObjectsMapsCompanyCity) SetSupportsTriple(v bool) {
	o.SupportsTriple = v
}

// GetIsDeleted returns the IsDeleted field value
func (o *FPHSpedVAPIObjectsMapsCompanyCity) GetIsDeleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value
// and a boolean to check if the value has been set.
func (o *FPHSpedVAPIObjectsMapsCompanyCity) GetIsDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDeleted, true
}

// SetIsDeleted sets field value
func (o *FPHSpedVAPIObjectsMapsCompanyCity) SetIsDeleted(v bool) {
	o.IsDeleted = v
}

// GetXCoord returns the XCoord field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *FPHSpedVAPIObjectsMapsCompanyCity) GetXCoord() float64 {
	if o == nil || o.XCoord.Get() == nil {
		var ret float64
		return ret
	}

	return *o.XCoord.Get()
}

// GetXCoordOk returns a tuple with the XCoord field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FPHSpedVAPIObjectsMapsCompanyCity) GetXCoordOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.XCoord.Get(), o.XCoord.IsSet()
}

// SetXCoord sets field value
func (o *FPHSpedVAPIObjectsMapsCompanyCity) SetXCoord(v float64) {
	o.XCoord.Set(&v)
}

// GetZCoord returns the ZCoord field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *FPHSpedVAPIObjectsMapsCompanyCity) GetZCoord() float64 {
	if o == nil || o.ZCoord.Get() == nil {
		var ret float64
		return ret
	}

	return *o.ZCoord.Get()
}

// GetZCoordOk returns a tuple with the ZCoord field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FPHSpedVAPIObjectsMapsCompanyCity) GetZCoordOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ZCoord.Get(), o.ZCoord.IsSet()
}

// SetZCoord sets field value
func (o *FPHSpedVAPIObjectsMapsCompanyCity) SetZCoord(v float64) {
	o.ZCoord.Set(&v)
}

// GetDisabledOnMaps returns the DisabledOnMaps field value
// If the value is explicit nil, the zero value for []FPHSpedVAPIObjectsMapsMap will be returned
func (o *FPHSpedVAPIObjectsMapsCompanyCity) GetDisabledOnMaps() []FPHSpedVAPIObjectsMapsMap {
	if o == nil {
		var ret []FPHSpedVAPIObjectsMapsMap
		return ret
	}

	return o.DisabledOnMaps
}

// GetDisabledOnMapsOk returns a tuple with the DisabledOnMaps field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FPHSpedVAPIObjectsMapsCompanyCity) GetDisabledOnMapsOk() ([]FPHSpedVAPIObjectsMapsMap, bool) {
	if o == nil || IsNil(o.DisabledOnMaps) {
		return nil, false
	}
	return o.DisabledOnMaps, true
}

// SetDisabledOnMaps sets field value
func (o *FPHSpedVAPIObjectsMapsCompanyCity) SetDisabledOnMaps(v []FPHSpedVAPIObjectsMapsMap) {
	o.DisabledOnMaps = v
}

func (o FPHSpedVAPIObjectsMapsCompanyCity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FPHSpedVAPIObjectsMapsCompanyCity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["company"] = o.Company.Get()
	toSerialize["city"] = o.City.Get()
	toSerialize["map"] = o.Map.Get()
	toSerialize["supportsDouble"] = o.SupportsDouble
	toSerialize["supportsTriple"] = o.SupportsTriple
	toSerialize["isDeleted"] = o.IsDeleted
	toSerialize["x_Coord"] = o.XCoord.Get()
	toSerialize["z_Coord"] = o.ZCoord.Get()
	if o.DisabledOnMaps != nil {
		toSerialize["disabledOnMaps"] = o.DisabledOnMaps
	}
	return toSerialize, nil
}

func (o *FPHSpedVAPIObjectsMapsCompanyCity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"company",
		"city",
		"map",
		"supportsDouble",
		"supportsTriple",
		"isDeleted",
		"x_Coord",
		"z_Coord",
		"disabledOnMaps",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFPHSpedVAPIObjectsMapsCompanyCity := _FPHSpedVAPIObjectsMapsCompanyCity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFPHSpedVAPIObjectsMapsCompanyCity)

	if err != nil {
		return err
	}

	*o = FPHSpedVAPIObjectsMapsCompanyCity(varFPHSpedVAPIObjectsMapsCompanyCity)

	return err
}

type NullableFPHSpedVAPIObjectsMapsCompanyCity struct {
	value *FPHSpedVAPIObjectsMapsCompanyCity
	isSet bool
}

func (v NullableFPHSpedVAPIObjectsMapsCompanyCity) Get() *FPHSpedVAPIObjectsMapsCompanyCity {
	return v.value
}

func (v *NullableFPHSpedVAPIObjectsMapsCompanyCity) Set(val *FPHSpedVAPIObjectsMapsCompanyCity) {
	v.value = val
	v.isSet = true
}

func (v NullableFPHSpedVAPIObjectsMapsCompanyCity) IsSet() bool {
	return v.isSet
}

func (v *NullableFPHSpedVAPIObjectsMapsCompanyCity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFPHSpedVAPIObjectsMapsCompanyCity(val *FPHSpedVAPIObjectsMapsCompanyCity) *NullableFPHSpedVAPIObjectsMapsCompanyCity {
	return &NullableFPHSpedVAPIObjectsMapsCompanyCity{value: val, isSet: true}
}

func (v NullableFPHSpedVAPIObjectsMapsCompanyCity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFPHSpedVAPIObjectsMapsCompanyCity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


