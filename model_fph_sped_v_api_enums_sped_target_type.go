/*
SpedV API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FPHSpedVAPIEnumsSpedTargetType   0 = Value  1 = Distance  2 = WeightDistance
type FPHSpedVAPIEnumsSpedTargetType int32

// List of FPH.SpedV.API.Enums.SpedTargetType
const (
	_0 FPHSpedVAPIEnumsSpedTargetType = 0
	_1 FPHSpedVAPIEnumsSpedTargetType = 1
	_2 FPHSpedVAPIEnumsSpedTargetType = 2
)

// All allowed values of FPHSpedVAPIEnumsSpedTargetType enum
var AllowedFPHSpedVAPIEnumsSpedTargetTypeEnumValues = []FPHSpedVAPIEnumsSpedTargetType{
	0,
	1,
	2,
}

func (v *FPHSpedVAPIEnumsSpedTargetType) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FPHSpedVAPIEnumsSpedTargetType(value)
	for _, existing := range AllowedFPHSpedVAPIEnumsSpedTargetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FPHSpedVAPIEnumsSpedTargetType", value)
}

// NewFPHSpedVAPIEnumsSpedTargetTypeFromValue returns a pointer to a valid FPHSpedVAPIEnumsSpedTargetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFPHSpedVAPIEnumsSpedTargetTypeFromValue(v int32) (*FPHSpedVAPIEnumsSpedTargetType, error) {
	ev := FPHSpedVAPIEnumsSpedTargetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FPHSpedVAPIEnumsSpedTargetType: valid values are %v", v, AllowedFPHSpedVAPIEnumsSpedTargetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FPHSpedVAPIEnumsSpedTargetType) IsValid() bool {
	for _, existing := range AllowedFPHSpedVAPIEnumsSpedTargetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FPH.SpedV.API.Enums.SpedTargetType value
func (v FPHSpedVAPIEnumsSpedTargetType) Ptr() *FPHSpedVAPIEnumsSpedTargetType {
	return &v
}

type NullableFPHSpedVAPIEnumsSpedTargetType struct {
	value *FPHSpedVAPIEnumsSpedTargetType
	isSet bool
}

func (v NullableFPHSpedVAPIEnumsSpedTargetType) Get() *FPHSpedVAPIEnumsSpedTargetType {
	return v.value
}

func (v *NullableFPHSpedVAPIEnumsSpedTargetType) Set(val *FPHSpedVAPIEnumsSpedTargetType) {
	v.value = val
	v.isSet = true
}

func (v NullableFPHSpedVAPIEnumsSpedTargetType) IsSet() bool {
	return v.isSet
}

func (v *NullableFPHSpedVAPIEnumsSpedTargetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFPHSpedVAPIEnumsSpedTargetType(val *FPHSpedVAPIEnumsSpedTargetType) *NullableFPHSpedVAPIEnumsSpedTargetType {
	return &NullableFPHSpedVAPIEnumsSpedTargetType{value: val, isSet: true}
}

func (v NullableFPHSpedVAPIEnumsSpedTargetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFPHSpedVAPIEnumsSpedTargetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

