/*
SpedV API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// BranchAPIService BranchAPI service
type BranchAPIService service

type ApiV1OwnedbranchesBranchidGetRequest struct {
	ctx context.Context
	ApiService *BranchAPIService
	branchid int32
}

func (r ApiV1OwnedbranchesBranchidGetRequest) Execute() (*FPHSpedVAPIObjectsSpeditionsTruckBranchStatistic, *http.Response, error) {
	return r.ApiService.V1OwnedbranchesBranchidGetExecute(r)
}

/*
V1OwnedbranchesBranchidGet Method for V1OwnedbranchesBranchidGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param branchid
 @return ApiV1OwnedbranchesBranchidGetRequest
*/
func (a *BranchAPIService) V1OwnedbranchesBranchidGet(ctx context.Context, branchid int32) ApiV1OwnedbranchesBranchidGetRequest {
	return ApiV1OwnedbranchesBranchidGetRequest{
		ApiService: a,
		ctx: ctx,
		branchid: branchid,
	}
}

// Execute executes the request
//  @return FPHSpedVAPIObjectsSpeditionsTruckBranchStatistic
func (a *BranchAPIService) V1OwnedbranchesBranchidGetExecute(r ApiV1OwnedbranchesBranchidGetRequest) (*FPHSpedVAPIObjectsSpeditionsTruckBranchStatistic, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FPHSpedVAPIObjectsSpeditionsTruckBranchStatistic
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BranchAPIService.V1OwnedbranchesBranchidGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ownedbranches/{branchid}"
	localVarPath = strings.Replace(localVarPath, "{"+"branchid"+"}", url.PathEscape(parameterValueToString(r.branchid, "branchid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1OwnedbranchesBranchidStatisticsGetRequest struct {
	ctx context.Context
	ApiService *BranchAPIService
	branchid int32
	startdate *time.Time
	enddate *time.Time
}

func (r ApiV1OwnedbranchesBranchidStatisticsGetRequest) Startdate(startdate time.Time) ApiV1OwnedbranchesBranchidStatisticsGetRequest {
	r.startdate = &startdate
	return r
}

func (r ApiV1OwnedbranchesBranchidStatisticsGetRequest) Enddate(enddate time.Time) ApiV1OwnedbranchesBranchidStatisticsGetRequest {
	r.enddate = &enddate
	return r
}

func (r ApiV1OwnedbranchesBranchidStatisticsGetRequest) Execute() (*FPHSpedVAPIObjectsSpeditionsTruckBranchStatistic, *http.Response, error) {
	return r.ApiService.V1OwnedbranchesBranchidStatisticsGetExecute(r)
}

/*
V1OwnedbranchesBranchidStatisticsGet Method for V1OwnedbranchesBranchidStatisticsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param branchid
 @return ApiV1OwnedbranchesBranchidStatisticsGetRequest
*/
func (a *BranchAPIService) V1OwnedbranchesBranchidStatisticsGet(ctx context.Context, branchid int32) ApiV1OwnedbranchesBranchidStatisticsGetRequest {
	return ApiV1OwnedbranchesBranchidStatisticsGetRequest{
		ApiService: a,
		ctx: ctx,
		branchid: branchid,
	}
}

// Execute executes the request
//  @return FPHSpedVAPIObjectsSpeditionsTruckBranchStatistic
func (a *BranchAPIService) V1OwnedbranchesBranchidStatisticsGetExecute(r ApiV1OwnedbranchesBranchidStatisticsGetRequest) (*FPHSpedVAPIObjectsSpeditionsTruckBranchStatistic, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FPHSpedVAPIObjectsSpeditionsTruckBranchStatistic
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BranchAPIService.V1OwnedbranchesBranchidStatisticsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ownedbranches/{branchid}/statistics"
	localVarPath = strings.Replace(localVarPath, "{"+"branchid"+"}", url.PathEscape(parameterValueToString(r.branchid, "branchid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startdate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startdate", r.startdate, "")
	}
	if r.enddate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enddate", r.enddate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1OwnedbranchesGetRequest struct {
	ctx context.Context
	ApiService *BranchAPIService
	includePartnerships *bool
}

func (r ApiV1OwnedbranchesGetRequest) IncludePartnerships(includePartnerships bool) ApiV1OwnedbranchesGetRequest {
	r.includePartnerships = &includePartnerships
	return r
}

func (r ApiV1OwnedbranchesGetRequest) Execute() ([]FPHSpedVAPIObjectsSpeditionsOwnedBranch, *http.Response, error) {
	return r.ApiService.V1OwnedbranchesGetExecute(r)
}

/*
V1OwnedbranchesGet Method for V1OwnedbranchesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1OwnedbranchesGetRequest
*/
func (a *BranchAPIService) V1OwnedbranchesGet(ctx context.Context) ApiV1OwnedbranchesGetRequest {
	return ApiV1OwnedbranchesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []FPHSpedVAPIObjectsSpeditionsOwnedBranch
func (a *BranchAPIService) V1OwnedbranchesGetExecute(r ApiV1OwnedbranchesGetRequest) ([]FPHSpedVAPIObjectsSpeditionsOwnedBranch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []FPHSpedVAPIObjectsSpeditionsOwnedBranch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BranchAPIService.V1OwnedbranchesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ownedbranches"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includePartnerships != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includePartnerships", r.includePartnerships, "")
	} else {
		var defaultValue bool = false
		r.includePartnerships = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1SparepartsGetRequest struct {
	ctx context.Context
	ApiService *BranchAPIService
}

func (r ApiV1SparepartsGetRequest) Execute() (*FPHSpedVAPIObjectsSpeditionsSparePart, *http.Response, error) {
	return r.ApiService.V1SparepartsGetExecute(r)
}

/*
V1SparepartsGet Method for V1SparepartsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1SparepartsGetRequest
*/
func (a *BranchAPIService) V1SparepartsGet(ctx context.Context) ApiV1SparepartsGetRequest {
	return ApiV1SparepartsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FPHSpedVAPIObjectsSpeditionsSparePart
func (a *BranchAPIService) V1SparepartsGetExecute(r ApiV1SparepartsGetRequest) (*FPHSpedVAPIObjectsSpeditionsSparePart, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FPHSpedVAPIObjectsSpeditionsSparePart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BranchAPIService.V1SparepartsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/spareparts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1SparepartsSparepartidGetRequest struct {
	ctx context.Context
	ApiService *BranchAPIService
	sparepartid int32
}

func (r ApiV1SparepartsSparepartidGetRequest) Execute() (*FPHSpedVAPIObjectsSpeditionsSparePart, *http.Response, error) {
	return r.ApiService.V1SparepartsSparepartidGetExecute(r)
}

/*
V1SparepartsSparepartidGet Method for V1SparepartsSparepartidGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sparepartid
 @return ApiV1SparepartsSparepartidGetRequest
*/
func (a *BranchAPIService) V1SparepartsSparepartidGet(ctx context.Context, sparepartid int32) ApiV1SparepartsSparepartidGetRequest {
	return ApiV1SparepartsSparepartidGetRequest{
		ApiService: a,
		ctx: ctx,
		sparepartid: sparepartid,
	}
}

// Execute executes the request
//  @return FPHSpedVAPIObjectsSpeditionsSparePart
func (a *BranchAPIService) V1SparepartsSparepartidGetExecute(r ApiV1SparepartsSparepartidGetRequest) (*FPHSpedVAPIObjectsSpeditionsSparePart, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FPHSpedVAPIObjectsSpeditionsSparePart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BranchAPIService.V1SparepartsSparepartidGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/spareparts/{sparepartid}"
	localVarPath = strings.Replace(localVarPath, "{"+"sparepartid"+"}", url.PathEscape(parameterValueToString(r.sparepartid, "sparepartid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1SparepartsSparepartidProvidersGetRequest struct {
	ctx context.Context
	ApiService *BranchAPIService
	sparepartid int32
}

func (r ApiV1SparepartsSparepartidProvidersGetRequest) Execute() (*FPHSpedVAPIObjectsSpeditionsSparePart, *http.Response, error) {
	return r.ApiService.V1SparepartsSparepartidProvidersGetExecute(r)
}

/*
V1SparepartsSparepartidProvidersGet Method for V1SparepartsSparepartidProvidersGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sparepartid
 @return ApiV1SparepartsSparepartidProvidersGetRequest
*/
func (a *BranchAPIService) V1SparepartsSparepartidProvidersGet(ctx context.Context, sparepartid int32) ApiV1SparepartsSparepartidProvidersGetRequest {
	return ApiV1SparepartsSparepartidProvidersGetRequest{
		ApiService: a,
		ctx: ctx,
		sparepartid: sparepartid,
	}
}

// Execute executes the request
//  @return FPHSpedVAPIObjectsSpeditionsSparePart
func (a *BranchAPIService) V1SparepartsSparepartidProvidersGetExecute(r ApiV1SparepartsSparepartidProvidersGetRequest) (*FPHSpedVAPIObjectsSpeditionsSparePart, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FPHSpedVAPIObjectsSpeditionsSparePart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BranchAPIService.V1SparepartsSparepartidProvidersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/spareparts/{sparepartid}/providers"
	localVarPath = strings.Replace(localVarPath, "{"+"sparepartid"+"}", url.PathEscape(parameterValueToString(r.sparepartid, "sparepartid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
