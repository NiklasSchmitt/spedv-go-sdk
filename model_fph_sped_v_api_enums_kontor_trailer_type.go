/*
SpedV API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FPHSpedVAPIEnumsKontorTrailerType   0 = StandardTrailer  1 = DoubleTrailer  2 = BDoubleTrailer  3 = TripleTrailer  4 = ShortTrailer  -1 = NotSet
type FPHSpedVAPIEnumsKontorTrailerType int32

// List of FPH.SpedV.API.Enums.KontorTrailerType
const (
	_0 FPHSpedVAPIEnumsKontorTrailerType = 0
	_1 FPHSpedVAPIEnumsKontorTrailerType = 1
	_2 FPHSpedVAPIEnumsKontorTrailerType = 2
	_3 FPHSpedVAPIEnumsKontorTrailerType = 3
	_4 FPHSpedVAPIEnumsKontorTrailerType = 4
	_MINUS_1 FPHSpedVAPIEnumsKontorTrailerType = -1
)

// All allowed values of FPHSpedVAPIEnumsKontorTrailerType enum
var AllowedFPHSpedVAPIEnumsKontorTrailerTypeEnumValues = []FPHSpedVAPIEnumsKontorTrailerType{
	0,
	1,
	2,
	3,
	4,
	-1,
}

func (v *FPHSpedVAPIEnumsKontorTrailerType) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FPHSpedVAPIEnumsKontorTrailerType(value)
	for _, existing := range AllowedFPHSpedVAPIEnumsKontorTrailerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FPHSpedVAPIEnumsKontorTrailerType", value)
}

// NewFPHSpedVAPIEnumsKontorTrailerTypeFromValue returns a pointer to a valid FPHSpedVAPIEnumsKontorTrailerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFPHSpedVAPIEnumsKontorTrailerTypeFromValue(v int32) (*FPHSpedVAPIEnumsKontorTrailerType, error) {
	ev := FPHSpedVAPIEnumsKontorTrailerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FPHSpedVAPIEnumsKontorTrailerType: valid values are %v", v, AllowedFPHSpedVAPIEnumsKontorTrailerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FPHSpedVAPIEnumsKontorTrailerType) IsValid() bool {
	for _, existing := range AllowedFPHSpedVAPIEnumsKontorTrailerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FPH.SpedV.API.Enums.KontorTrailerType value
func (v FPHSpedVAPIEnumsKontorTrailerType) Ptr() *FPHSpedVAPIEnumsKontorTrailerType {
	return &v
}

type NullableFPHSpedVAPIEnumsKontorTrailerType struct {
	value *FPHSpedVAPIEnumsKontorTrailerType
	isSet bool
}

func (v NullableFPHSpedVAPIEnumsKontorTrailerType) Get() *FPHSpedVAPIEnumsKontorTrailerType {
	return v.value
}

func (v *NullableFPHSpedVAPIEnumsKontorTrailerType) Set(val *FPHSpedVAPIEnumsKontorTrailerType) {
	v.value = val
	v.isSet = true
}

func (v NullableFPHSpedVAPIEnumsKontorTrailerType) IsSet() bool {
	return v.isSet
}

func (v *NullableFPHSpedVAPIEnumsKontorTrailerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFPHSpedVAPIEnumsKontorTrailerType(val *FPHSpedVAPIEnumsKontorTrailerType) *NullableFPHSpedVAPIEnumsKontorTrailerType {
	return &NullableFPHSpedVAPIEnumsKontorTrailerType{value: val, isSet: true}
}

func (v NullableFPHSpedVAPIEnumsKontorTrailerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFPHSpedVAPIEnumsKontorTrailerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

