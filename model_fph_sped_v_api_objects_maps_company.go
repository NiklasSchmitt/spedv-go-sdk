/*
SpedV API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FPHSpedVAPIObjectsMapsCompany type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FPHSpedVAPIObjectsMapsCompany{}

// FPHSpedVAPIObjectsMapsCompany struct for FPHSpedVAPIObjectsMapsCompany
type FPHSpedVAPIObjectsMapsCompany struct {
	Id int32 `json:"id"`
	VisibleName NullableString `json:"visibleName"`
	InGameName NullableString `json:"inGameName"`
	Category NullableFPHSpedVAPIObjectsMapsCompanyCategory `json:"category"`
}

type _FPHSpedVAPIObjectsMapsCompany FPHSpedVAPIObjectsMapsCompany

// NewFPHSpedVAPIObjectsMapsCompany instantiates a new FPHSpedVAPIObjectsMapsCompany object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFPHSpedVAPIObjectsMapsCompany(id int32, visibleName NullableString, inGameName NullableString, category NullableFPHSpedVAPIObjectsMapsCompanyCategory) *FPHSpedVAPIObjectsMapsCompany {
	this := FPHSpedVAPIObjectsMapsCompany{}
	this.Id = id
	this.VisibleName = visibleName
	this.InGameName = inGameName
	this.Category = category
	return &this
}

// NewFPHSpedVAPIObjectsMapsCompanyWithDefaults instantiates a new FPHSpedVAPIObjectsMapsCompany object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFPHSpedVAPIObjectsMapsCompanyWithDefaults() *FPHSpedVAPIObjectsMapsCompany {
	this := FPHSpedVAPIObjectsMapsCompany{}
	return &this
}

// GetId returns the Id field value
func (o *FPHSpedVAPIObjectsMapsCompany) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FPHSpedVAPIObjectsMapsCompany) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FPHSpedVAPIObjectsMapsCompany) SetId(v int32) {
	o.Id = v
}

// GetVisibleName returns the VisibleName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *FPHSpedVAPIObjectsMapsCompany) GetVisibleName() string {
	if o == nil || o.VisibleName.Get() == nil {
		var ret string
		return ret
	}

	return *o.VisibleName.Get()
}

// GetVisibleNameOk returns a tuple with the VisibleName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FPHSpedVAPIObjectsMapsCompany) GetVisibleNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VisibleName.Get(), o.VisibleName.IsSet()
}

// SetVisibleName sets field value
func (o *FPHSpedVAPIObjectsMapsCompany) SetVisibleName(v string) {
	o.VisibleName.Set(&v)
}

// GetInGameName returns the InGameName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *FPHSpedVAPIObjectsMapsCompany) GetInGameName() string {
	if o == nil || o.InGameName.Get() == nil {
		var ret string
		return ret
	}

	return *o.InGameName.Get()
}

// GetInGameNameOk returns a tuple with the InGameName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FPHSpedVAPIObjectsMapsCompany) GetInGameNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InGameName.Get(), o.InGameName.IsSet()
}

// SetInGameName sets field value
func (o *FPHSpedVAPIObjectsMapsCompany) SetInGameName(v string) {
	o.InGameName.Set(&v)
}

// GetCategory returns the Category field value
// If the value is explicit nil, the zero value for FPHSpedVAPIObjectsMapsCompanyCategory will be returned
func (o *FPHSpedVAPIObjectsMapsCompany) GetCategory() FPHSpedVAPIObjectsMapsCompanyCategory {
	if o == nil || o.Category.Get() == nil {
		var ret FPHSpedVAPIObjectsMapsCompanyCategory
		return ret
	}

	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FPHSpedVAPIObjectsMapsCompany) GetCategoryOk() (*FPHSpedVAPIObjectsMapsCompanyCategory, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// SetCategory sets field value
func (o *FPHSpedVAPIObjectsMapsCompany) SetCategory(v FPHSpedVAPIObjectsMapsCompanyCategory) {
	o.Category.Set(&v)
}

func (o FPHSpedVAPIObjectsMapsCompany) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FPHSpedVAPIObjectsMapsCompany) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["visibleName"] = o.VisibleName.Get()
	toSerialize["inGameName"] = o.InGameName.Get()
	toSerialize["category"] = o.Category.Get()
	return toSerialize, nil
}

func (o *FPHSpedVAPIObjectsMapsCompany) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"visibleName",
		"inGameName",
		"category",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFPHSpedVAPIObjectsMapsCompany := _FPHSpedVAPIObjectsMapsCompany{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFPHSpedVAPIObjectsMapsCompany)

	if err != nil {
		return err
	}

	*o = FPHSpedVAPIObjectsMapsCompany(varFPHSpedVAPIObjectsMapsCompany)

	return err
}

type NullableFPHSpedVAPIObjectsMapsCompany struct {
	value *FPHSpedVAPIObjectsMapsCompany
	isSet bool
}

func (v NullableFPHSpedVAPIObjectsMapsCompany) Get() *FPHSpedVAPIObjectsMapsCompany {
	return v.value
}

func (v *NullableFPHSpedVAPIObjectsMapsCompany) Set(val *FPHSpedVAPIObjectsMapsCompany) {
	v.value = val
	v.isSet = true
}

func (v NullableFPHSpedVAPIObjectsMapsCompany) IsSet() bool {
	return v.isSet
}

func (v *NullableFPHSpedVAPIObjectsMapsCompany) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFPHSpedVAPIObjectsMapsCompany(val *FPHSpedVAPIObjectsMapsCompany) *NullableFPHSpedVAPIObjectsMapsCompany {
	return &NullableFPHSpedVAPIObjectsMapsCompany{value: val, isSet: true}
}

func (v NullableFPHSpedVAPIObjectsMapsCompany) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFPHSpedVAPIObjectsMapsCompany) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


