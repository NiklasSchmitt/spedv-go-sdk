/*
SpedV API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FPHSpedVAPIEnumsJobOfferState   0 = WaitingSpedition  1 = WaitingDrive  2 = InDrive  3 = Finished  -1 = NotAvaliable
type FPHSpedVAPIEnumsJobOfferState int32

// List of FPH.SpedV.API.Enums.JobOfferState
const (
	_0 FPHSpedVAPIEnumsJobOfferState = 0
	_1 FPHSpedVAPIEnumsJobOfferState = 1
	_2 FPHSpedVAPIEnumsJobOfferState = 2
	_3 FPHSpedVAPIEnumsJobOfferState = 3
	_MINUS_1 FPHSpedVAPIEnumsJobOfferState = -1
)

// All allowed values of FPHSpedVAPIEnumsJobOfferState enum
var AllowedFPHSpedVAPIEnumsJobOfferStateEnumValues = []FPHSpedVAPIEnumsJobOfferState{
	0,
	1,
	2,
	3,
	-1,
}

func (v *FPHSpedVAPIEnumsJobOfferState) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FPHSpedVAPIEnumsJobOfferState(value)
	for _, existing := range AllowedFPHSpedVAPIEnumsJobOfferStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FPHSpedVAPIEnumsJobOfferState", value)
}

// NewFPHSpedVAPIEnumsJobOfferStateFromValue returns a pointer to a valid FPHSpedVAPIEnumsJobOfferState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFPHSpedVAPIEnumsJobOfferStateFromValue(v int32) (*FPHSpedVAPIEnumsJobOfferState, error) {
	ev := FPHSpedVAPIEnumsJobOfferState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FPHSpedVAPIEnumsJobOfferState: valid values are %v", v, AllowedFPHSpedVAPIEnumsJobOfferStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FPHSpedVAPIEnumsJobOfferState) IsValid() bool {
	for _, existing := range AllowedFPHSpedVAPIEnumsJobOfferStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FPH.SpedV.API.Enums.JobOfferState value
func (v FPHSpedVAPIEnumsJobOfferState) Ptr() *FPHSpedVAPIEnumsJobOfferState {
	return &v
}

type NullableFPHSpedVAPIEnumsJobOfferState struct {
	value *FPHSpedVAPIEnumsJobOfferState
	isSet bool
}

func (v NullableFPHSpedVAPIEnumsJobOfferState) Get() *FPHSpedVAPIEnumsJobOfferState {
	return v.value
}

func (v *NullableFPHSpedVAPIEnumsJobOfferState) Set(val *FPHSpedVAPIEnumsJobOfferState) {
	v.value = val
	v.isSet = true
}

func (v NullableFPHSpedVAPIEnumsJobOfferState) IsSet() bool {
	return v.isSet
}

func (v *NullableFPHSpedVAPIEnumsJobOfferState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFPHSpedVAPIEnumsJobOfferState(val *FPHSpedVAPIEnumsJobOfferState) *NullableFPHSpedVAPIEnumsJobOfferState {
	return &NullableFPHSpedVAPIEnumsJobOfferState{value: val, isSet: true}
}

func (v NullableFPHSpedVAPIEnumsJobOfferState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFPHSpedVAPIEnumsJobOfferState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

