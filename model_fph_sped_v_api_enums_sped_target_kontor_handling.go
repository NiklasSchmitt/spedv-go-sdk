/*
SpedV API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FPHSpedVAPIEnumsSpedTargetKontorHandling   0 = AllTasks  1 = OnlyKontorTasks  2 = NoKontorTasks
type FPHSpedVAPIEnumsSpedTargetKontorHandling int32

// List of FPH.SpedV.API.Enums.SpedTargetKontorHandling
const (
	_0 FPHSpedVAPIEnumsSpedTargetKontorHandling = 0
	_1 FPHSpedVAPIEnumsSpedTargetKontorHandling = 1
	_2 FPHSpedVAPIEnumsSpedTargetKontorHandling = 2
)

// All allowed values of FPHSpedVAPIEnumsSpedTargetKontorHandling enum
var AllowedFPHSpedVAPIEnumsSpedTargetKontorHandlingEnumValues = []FPHSpedVAPIEnumsSpedTargetKontorHandling{
	0,
	1,
	2,
}

func (v *FPHSpedVAPIEnumsSpedTargetKontorHandling) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FPHSpedVAPIEnumsSpedTargetKontorHandling(value)
	for _, existing := range AllowedFPHSpedVAPIEnumsSpedTargetKontorHandlingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FPHSpedVAPIEnumsSpedTargetKontorHandling", value)
}

// NewFPHSpedVAPIEnumsSpedTargetKontorHandlingFromValue returns a pointer to a valid FPHSpedVAPIEnumsSpedTargetKontorHandling
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFPHSpedVAPIEnumsSpedTargetKontorHandlingFromValue(v int32) (*FPHSpedVAPIEnumsSpedTargetKontorHandling, error) {
	ev := FPHSpedVAPIEnumsSpedTargetKontorHandling(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FPHSpedVAPIEnumsSpedTargetKontorHandling: valid values are %v", v, AllowedFPHSpedVAPIEnumsSpedTargetKontorHandlingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FPHSpedVAPIEnumsSpedTargetKontorHandling) IsValid() bool {
	for _, existing := range AllowedFPHSpedVAPIEnumsSpedTargetKontorHandlingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FPH.SpedV.API.Enums.SpedTargetKontorHandling value
func (v FPHSpedVAPIEnumsSpedTargetKontorHandling) Ptr() *FPHSpedVAPIEnumsSpedTargetKontorHandling {
	return &v
}

type NullableFPHSpedVAPIEnumsSpedTargetKontorHandling struct {
	value *FPHSpedVAPIEnumsSpedTargetKontorHandling
	isSet bool
}

func (v NullableFPHSpedVAPIEnumsSpedTargetKontorHandling) Get() *FPHSpedVAPIEnumsSpedTargetKontorHandling {
	return v.value
}

func (v *NullableFPHSpedVAPIEnumsSpedTargetKontorHandling) Set(val *FPHSpedVAPIEnumsSpedTargetKontorHandling) {
	v.value = val
	v.isSet = true
}

func (v NullableFPHSpedVAPIEnumsSpedTargetKontorHandling) IsSet() bool {
	return v.isSet
}

func (v *NullableFPHSpedVAPIEnumsSpedTargetKontorHandling) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFPHSpedVAPIEnumsSpedTargetKontorHandling(val *FPHSpedVAPIEnumsSpedTargetKontorHandling) *NullableFPHSpedVAPIEnumsSpedTargetKontorHandling {
	return &NullableFPHSpedVAPIEnumsSpedTargetKontorHandling{value: val, isSet: true}
}

func (v NullableFPHSpedVAPIEnumsSpedTargetKontorHandling) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFPHSpedVAPIEnumsSpedTargetKontorHandling) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

