/*
SpedV API

Testing MapsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/NiklasSchmitt/spedv-go-sdk"
)

func Test_openapi_MapsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MapsAPIService V1CompaniesCompidBranchesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var compid int32

		resp, httpRes, err := apiClient.MapsAPI.V1CompaniesCompidBranchesGet(context.Background(), compid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MapsAPIService V1CompaniesCompidGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var compid int32

		resp, httpRes, err := apiClient.MapsAPI.V1CompaniesCompidGet(context.Background(), compid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MapsAPIService V1CompaniesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MapsAPI.V1CompaniesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MapsAPIService V1CompanycategoriesCompidGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var compid int32

		resp, httpRes, err := apiClient.MapsAPI.V1CompanycategoriesCompidGet(context.Background(), compid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MapsAPIService V1CompanycategoriesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MapsAPI.V1CompanycategoriesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MapsAPIService V1CountriesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MapsAPI.V1CountriesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MapsAPIService V1MapsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MapsAPI.V1MapsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MapsAPIService V1MapsMapIdCitiesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mapId int32

		resp, httpRes, err := apiClient.MapsAPI.V1MapsMapIdCitiesGet(context.Background(), mapId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MapsAPIService V1MapsMapIdCompanycitiesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mapId int32

		resp, httpRes, err := apiClient.MapsAPI.V1MapsMapIdCompanycitiesGet(context.Background(), mapId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
