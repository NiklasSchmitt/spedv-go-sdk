/*
SpedV API

Testing LocationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/NiklasSchmitt/spedv-go-sdk"
)

func Test_openapi_LocationAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LocationAPIService V1LocationQueryGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var query string

		resp, httpRes, err := apiClient.LocationAPI.V1LocationQueryGet(context.Background(), query).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LocationAPIService V1LocationRealrouteStartCityIdDestinationCityIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var startCityId int32
		var destinationCityId int32

		resp, httpRes, err := apiClient.LocationAPI.V1LocationRealrouteStartCityIdDestinationCityIdGet(context.Background(), startCityId, destinationCityId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LocationAPIService V1LocationScsmapDistanceStartBranchIdDestinationBranchIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var startBranchId int32
		var destinationBranchId int32

		resp, httpRes, err := apiClient.LocationAPI.V1LocationScsmapDistanceStartBranchIdDestinationBranchIdGet(context.Background(), startBranchId, destinationBranchId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
