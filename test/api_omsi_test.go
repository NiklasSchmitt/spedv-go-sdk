/*
SpedV API

Testing OmsiAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/NiklasSchmitt/spedv-go-sdk"
)

func Test_openapi_OmsiAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OmsiAPIService V1OmsiDriventripsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OmsiAPI.V1OmsiDriventripsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OmsiAPIService V1OmsiMapsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OmsiAPI.V1OmsiMapsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OmsiAPIService V1OmsiMapsMapidBusstopsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mapid int32

		resp, httpRes, err := apiClient.OmsiAPI.V1OmsiMapsMapidBusstopsGet(context.Background(), mapid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OmsiAPIService V1OmsiMapsMapidDestinationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mapid int32

		resp, httpRes, err := apiClient.OmsiAPI.V1OmsiMapsMapidDestinationsGet(context.Background(), mapid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OmsiAPIService V1OmsiMapsMapidGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mapid int32

		resp, httpRes, err := apiClient.OmsiAPI.V1OmsiMapsMapidGet(context.Background(), mapid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OmsiAPIService V1OmsiMapsMapidStationlinksGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mapid int32

		resp, httpRes, err := apiClient.OmsiAPI.V1OmsiMapsMapidStationlinksGet(context.Background(), mapid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OmsiAPIService V1OmsiMapsMapidToursGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mapid int32

		resp, httpRes, err := apiClient.OmsiAPI.V1OmsiMapsMapidToursGet(context.Background(), mapid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OmsiAPIService V1OmsiMapsMapidToursTouridGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mapid int32
		var tourid int32

		resp, httpRes, err := apiClient.OmsiAPI.V1OmsiMapsMapidToursTouridGet(context.Background(), mapid, tourid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OmsiAPIService V1OmsiMapsMapidToursTouridTripsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mapid int32
		var tourid int32

		resp, httpRes, err := apiClient.OmsiAPI.V1OmsiMapsMapidToursTouridTripsGet(context.Background(), mapid, tourid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OmsiAPIService V1OmsiMapsMapidTourtripsDateGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mapid int32
		var date string

		resp, httpRes, err := apiClient.OmsiAPI.V1OmsiMapsMapidTourtripsDateGet(context.Background(), mapid, date).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OmsiAPIService V1OmsiMapsMapidTripsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mapid int32

		resp, httpRes, err := apiClient.OmsiAPI.V1OmsiMapsMapidTripsGet(context.Background(), mapid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
