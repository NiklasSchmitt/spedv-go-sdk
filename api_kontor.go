/*
SpedV API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// KontorAPIService KontorAPI service
type KontorAPIService service

type ApiV1KontorGameJobsAvailableGetRequest struct {
	ctx context.Context
	ApiService *KontorAPIService
	game FPHSpedVAPIEnumsGameEnum
}

func (r ApiV1KontorGameJobsAvailableGetRequest) Execute() ([]FPHSpedVAPIObjectsKontorJobOffer, *http.Response, error) {
	return r.ApiService.V1KontorGameJobsAvailableGetExecute(r)
}

/*
V1KontorGameJobsAvailableGet Method for V1KontorGameJobsAvailableGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param game   0 = ETS2  1 = ATS  -1 = NotSet
 @return ApiV1KontorGameJobsAvailableGetRequest
*/
func (a *KontorAPIService) V1KontorGameJobsAvailableGet(ctx context.Context, game FPHSpedVAPIEnumsGameEnum) ApiV1KontorGameJobsAvailableGetRequest {
	return ApiV1KontorGameJobsAvailableGetRequest{
		ApiService: a,
		ctx: ctx,
		game: game,
	}
}

// Execute executes the request
//  @return []FPHSpedVAPIObjectsKontorJobOffer
func (a *KontorAPIService) V1KontorGameJobsAvailableGetExecute(r ApiV1KontorGameJobsAvailableGetRequest) ([]FPHSpedVAPIObjectsKontorJobOffer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []FPHSpedVAPIObjectsKontorJobOffer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KontorAPIService.V1KontorGameJobsAvailableGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/kontor/{game}/jobs/available"
	localVarPath = strings.Replace(localVarPath, "{"+"game"+"}", url.PathEscape(parameterValueToString(r.game, "game")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1KontorGameJobsGetRequest struct {
	ctx context.Context
	ApiService *KontorAPIService
	game FPHSpedVAPIEnumsGameEnum
	showFinished *bool
}

func (r ApiV1KontorGameJobsGetRequest) ShowFinished(showFinished bool) ApiV1KontorGameJobsGetRequest {
	r.showFinished = &showFinished
	return r
}

func (r ApiV1KontorGameJobsGetRequest) Execute() ([]FPHSpedVAPIObjectsKontorJob, *http.Response, error) {
	return r.ApiService.V1KontorGameJobsGetExecute(r)
}

/*
V1KontorGameJobsGet Method for V1KontorGameJobsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param game   0 = ETS2  1 = ATS  -1 = NotSet
 @return ApiV1KontorGameJobsGetRequest
*/
func (a *KontorAPIService) V1KontorGameJobsGet(ctx context.Context, game FPHSpedVAPIEnumsGameEnum) ApiV1KontorGameJobsGetRequest {
	return ApiV1KontorGameJobsGetRequest{
		ApiService: a,
		ctx: ctx,
		game: game,
	}
}

// Execute executes the request
//  @return []FPHSpedVAPIObjectsKontorJob
func (a *KontorAPIService) V1KontorGameJobsGetExecute(r ApiV1KontorGameJobsGetRequest) ([]FPHSpedVAPIObjectsKontorJob, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []FPHSpedVAPIObjectsKontorJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KontorAPIService.V1KontorGameJobsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/kontor/{game}/jobs"
	localVarPath = strings.Replace(localVarPath, "{"+"game"+"}", url.PathEscape(parameterValueToString(r.game, "game")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.showFinished != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showFinished", r.showFinished, "")
	} else {
		var defaultValue bool = true
		r.showFinished = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1KontorGameJobsJobidGetRequest struct {
	ctx context.Context
	ApiService *KontorAPIService
	game FPHSpedVAPIEnumsGameEnum
	jobid int32
}

func (r ApiV1KontorGameJobsJobidGetRequest) Execute() (*FPHSpedVAPIObjectsKontorJob, *http.Response, error) {
	return r.ApiService.V1KontorGameJobsJobidGetExecute(r)
}

/*
V1KontorGameJobsJobidGet Method for V1KontorGameJobsJobidGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param game   0 = ETS2  1 = ATS  -1 = NotSet
 @param jobid
 @return ApiV1KontorGameJobsJobidGetRequest
*/
func (a *KontorAPIService) V1KontorGameJobsJobidGet(ctx context.Context, game FPHSpedVAPIEnumsGameEnum, jobid int32) ApiV1KontorGameJobsJobidGetRequest {
	return ApiV1KontorGameJobsJobidGetRequest{
		ApiService: a,
		ctx: ctx,
		game: game,
		jobid: jobid,
	}
}

// Execute executes the request
//  @return FPHSpedVAPIObjectsKontorJob
func (a *KontorAPIService) V1KontorGameJobsJobidGetExecute(r ApiV1KontorGameJobsJobidGetRequest) (*FPHSpedVAPIObjectsKontorJob, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FPHSpedVAPIObjectsKontorJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KontorAPIService.V1KontorGameJobsJobidGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/kontor/{game}/jobs/{jobid}"
	localVarPath = strings.Replace(localVarPath, "{"+"game"+"}", url.PathEscape(parameterValueToString(r.game, "game")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"jobid"+"}", url.PathEscape(parameterValueToString(r.jobid, "jobid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1KontorGamePartsAvailableGetRequest struct {
	ctx context.Context
	ApiService *KontorAPIService
	game FPHSpedVAPIEnumsGameEnum
	includePartnerships *bool
}

func (r ApiV1KontorGamePartsAvailableGetRequest) IncludePartnerships(includePartnerships bool) ApiV1KontorGamePartsAvailableGetRequest {
	r.includePartnerships = &includePartnerships
	return r
}

func (r ApiV1KontorGamePartsAvailableGetRequest) Execute() ([]FPHSpedVAPIObjectsKontorJobPart, *http.Response, error) {
	return r.ApiService.V1KontorGamePartsAvailableGetExecute(r)
}

/*
V1KontorGamePartsAvailableGet Method for V1KontorGamePartsAvailableGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param game   0 = ETS2  1 = ATS  -1 = NotSet
 @return ApiV1KontorGamePartsAvailableGetRequest
*/
func (a *KontorAPIService) V1KontorGamePartsAvailableGet(ctx context.Context, game FPHSpedVAPIEnumsGameEnum) ApiV1KontorGamePartsAvailableGetRequest {
	return ApiV1KontorGamePartsAvailableGetRequest{
		ApiService: a,
		ctx: ctx,
		game: game,
	}
}

// Execute executes the request
//  @return []FPHSpedVAPIObjectsKontorJobPart
func (a *KontorAPIService) V1KontorGamePartsAvailableGetExecute(r ApiV1KontorGamePartsAvailableGetRequest) ([]FPHSpedVAPIObjectsKontorJobPart, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []FPHSpedVAPIObjectsKontorJobPart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KontorAPIService.V1KontorGamePartsAvailableGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/kontor/{game}/parts/available"
	localVarPath = strings.Replace(localVarPath, "{"+"game"+"}", url.PathEscape(parameterValueToString(r.game, "game")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includePartnerships != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includePartnerships", r.includePartnerships, "")
	} else {
		var defaultValue bool = false
		r.includePartnerships = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1KontorGamePartsGetRequest struct {
	ctx context.Context
	ApiService *KontorAPIService
	game FPHSpedVAPIEnumsGameEnum
	showFinished *bool
	includePartnerships *bool
}

func (r ApiV1KontorGamePartsGetRequest) ShowFinished(showFinished bool) ApiV1KontorGamePartsGetRequest {
	r.showFinished = &showFinished
	return r
}

func (r ApiV1KontorGamePartsGetRequest) IncludePartnerships(includePartnerships bool) ApiV1KontorGamePartsGetRequest {
	r.includePartnerships = &includePartnerships
	return r
}

func (r ApiV1KontorGamePartsGetRequest) Execute() ([]FPHSpedVAPIObjectsKontorJobPart, *http.Response, error) {
	return r.ApiService.V1KontorGamePartsGetExecute(r)
}

/*
V1KontorGamePartsGet Method for V1KontorGamePartsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param game   0 = ETS2  1 = ATS  -1 = NotSet
 @return ApiV1KontorGamePartsGetRequest
*/
func (a *KontorAPIService) V1KontorGamePartsGet(ctx context.Context, game FPHSpedVAPIEnumsGameEnum) ApiV1KontorGamePartsGetRequest {
	return ApiV1KontorGamePartsGetRequest{
		ApiService: a,
		ctx: ctx,
		game: game,
	}
}

// Execute executes the request
//  @return []FPHSpedVAPIObjectsKontorJobPart
func (a *KontorAPIService) V1KontorGamePartsGetExecute(r ApiV1KontorGamePartsGetRequest) ([]FPHSpedVAPIObjectsKontorJobPart, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []FPHSpedVAPIObjectsKontorJobPart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KontorAPIService.V1KontorGamePartsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/kontor/{game}/parts"
	localVarPath = strings.Replace(localVarPath, "{"+"game"+"}", url.PathEscape(parameterValueToString(r.game, "game")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.showFinished != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showFinished", r.showFinished, "")
	} else {
		var defaultValue bool = true
		r.showFinished = &defaultValue
	}
	if r.includePartnerships != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includePartnerships", r.includePartnerships, "")
	} else {
		var defaultValue bool = false
		r.includePartnerships = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1KontorGamePartsPartidGetRequest struct {
	ctx context.Context
	ApiService *KontorAPIService
	game FPHSpedVAPIEnumsGameEnum
	partid int32
}

func (r ApiV1KontorGamePartsPartidGetRequest) Execute() (*FPHSpedVAPIObjectsKontorJobPart, *http.Response, error) {
	return r.ApiService.V1KontorGamePartsPartidGetExecute(r)
}

/*
V1KontorGamePartsPartidGet Method for V1KontorGamePartsPartidGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param game   0 = ETS2  1 = ATS  -1 = NotSet
 @param partid
 @return ApiV1KontorGamePartsPartidGetRequest
*/
func (a *KontorAPIService) V1KontorGamePartsPartidGet(ctx context.Context, game FPHSpedVAPIEnumsGameEnum, partid int32) ApiV1KontorGamePartsPartidGetRequest {
	return ApiV1KontorGamePartsPartidGetRequest{
		ApiService: a,
		ctx: ctx,
		game: game,
		partid: partid,
	}
}

// Execute executes the request
//  @return FPHSpedVAPIObjectsKontorJobPart
func (a *KontorAPIService) V1KontorGamePartsPartidGetExecute(r ApiV1KontorGamePartsPartidGetRequest) (*FPHSpedVAPIObjectsKontorJobPart, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FPHSpedVAPIObjectsKontorJobPart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KontorAPIService.V1KontorGamePartsPartidGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/kontor/{game}/parts/{partid}"
	localVarPath = strings.Replace(localVarPath, "{"+"game"+"}", url.PathEscape(parameterValueToString(r.game, "game")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"partid"+"}", url.PathEscape(parameterValueToString(r.partid, "partid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1KontorGamePartsPartidJobsGetRequest struct {
	ctx context.Context
	ApiService *KontorAPIService
	game FPHSpedVAPIEnumsGameEnum
	partid int32
}

func (r ApiV1KontorGamePartsPartidJobsGetRequest) Execute() ([]FPHSpedVAPIObjectsKontorJob, *http.Response, error) {
	return r.ApiService.V1KontorGamePartsPartidJobsGetExecute(r)
}

/*
V1KontorGamePartsPartidJobsGet Method for V1KontorGamePartsPartidJobsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param game   0 = ETS2  1 = ATS  -1 = NotSet
 @param partid
 @return ApiV1KontorGamePartsPartidJobsGetRequest
*/
func (a *KontorAPIService) V1KontorGamePartsPartidJobsGet(ctx context.Context, game FPHSpedVAPIEnumsGameEnum, partid int32) ApiV1KontorGamePartsPartidJobsGetRequest {
	return ApiV1KontorGamePartsPartidJobsGetRequest{
		ApiService: a,
		ctx: ctx,
		game: game,
		partid: partid,
	}
}

// Execute executes the request
//  @return []FPHSpedVAPIObjectsKontorJob
func (a *KontorAPIService) V1KontorGamePartsPartidJobsGetExecute(r ApiV1KontorGamePartsPartidJobsGetRequest) ([]FPHSpedVAPIObjectsKontorJob, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []FPHSpedVAPIObjectsKontorJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KontorAPIService.V1KontorGamePartsPartidJobsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/kontor/{game}/parts/{partid}/jobs"
	localVarPath = strings.Replace(localVarPath, "{"+"game"+"}", url.PathEscape(parameterValueToString(r.game, "game")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"partid"+"}", url.PathEscape(parameterValueToString(r.partid, "partid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1KontorGameTrailersGetRequest struct {
	ctx context.Context
	ApiService *KontorAPIService
	game FPHSpedVAPIEnumsGameEnum
	includePartnerships *bool
}

func (r ApiV1KontorGameTrailersGetRequest) IncludePartnerships(includePartnerships bool) ApiV1KontorGameTrailersGetRequest {
	r.includePartnerships = &includePartnerships
	return r
}

func (r ApiV1KontorGameTrailersGetRequest) Execute() ([]FPHSpedVAPIObjectsKontorTrailer, *http.Response, error) {
	return r.ApiService.V1KontorGameTrailersGetExecute(r)
}

/*
V1KontorGameTrailersGet Method for V1KontorGameTrailersGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param game   0 = ETS2  1 = ATS  -1 = NotSet
 @return ApiV1KontorGameTrailersGetRequest
*/
func (a *KontorAPIService) V1KontorGameTrailersGet(ctx context.Context, game FPHSpedVAPIEnumsGameEnum) ApiV1KontorGameTrailersGetRequest {
	return ApiV1KontorGameTrailersGetRequest{
		ApiService: a,
		ctx: ctx,
		game: game,
	}
}

// Execute executes the request
//  @return []FPHSpedVAPIObjectsKontorTrailer
func (a *KontorAPIService) V1KontorGameTrailersGetExecute(r ApiV1KontorGameTrailersGetRequest) ([]FPHSpedVAPIObjectsKontorTrailer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []FPHSpedVAPIObjectsKontorTrailer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KontorAPIService.V1KontorGameTrailersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/kontor/{game}/trailers"
	localVarPath = strings.Replace(localVarPath, "{"+"game"+"}", url.PathEscape(parameterValueToString(r.game, "game")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includePartnerships != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includePartnerships", r.includePartnerships, "")
	} else {
		var defaultValue bool = false
		r.includePartnerships = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
