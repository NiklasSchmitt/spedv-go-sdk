/*
SpedV API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FPHSpedVAPIEnumsScreenshotState   0 = None  1 = Uploaded  2 = Processed  3 = Rejected  4 = TaskSettled
type FPHSpedVAPIEnumsScreenshotState int32

// List of FPH.SpedV.API.Enums.ScreenshotState
const (
	_0 FPHSpedVAPIEnumsScreenshotState = 0
	_1 FPHSpedVAPIEnumsScreenshotState = 1
	_2 FPHSpedVAPIEnumsScreenshotState = 2
	_3 FPHSpedVAPIEnumsScreenshotState = 3
	_4 FPHSpedVAPIEnumsScreenshotState = 4
)

// All allowed values of FPHSpedVAPIEnumsScreenshotState enum
var AllowedFPHSpedVAPIEnumsScreenshotStateEnumValues = []FPHSpedVAPIEnumsScreenshotState{
	0,
	1,
	2,
	3,
	4,
}

func (v *FPHSpedVAPIEnumsScreenshotState) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FPHSpedVAPIEnumsScreenshotState(value)
	for _, existing := range AllowedFPHSpedVAPIEnumsScreenshotStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FPHSpedVAPIEnumsScreenshotState", value)
}

// NewFPHSpedVAPIEnumsScreenshotStateFromValue returns a pointer to a valid FPHSpedVAPIEnumsScreenshotState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFPHSpedVAPIEnumsScreenshotStateFromValue(v int32) (*FPHSpedVAPIEnumsScreenshotState, error) {
	ev := FPHSpedVAPIEnumsScreenshotState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FPHSpedVAPIEnumsScreenshotState: valid values are %v", v, AllowedFPHSpedVAPIEnumsScreenshotStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FPHSpedVAPIEnumsScreenshotState) IsValid() bool {
	for _, existing := range AllowedFPHSpedVAPIEnumsScreenshotStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FPH.SpedV.API.Enums.ScreenshotState value
func (v FPHSpedVAPIEnumsScreenshotState) Ptr() *FPHSpedVAPIEnumsScreenshotState {
	return &v
}

type NullableFPHSpedVAPIEnumsScreenshotState struct {
	value *FPHSpedVAPIEnumsScreenshotState
	isSet bool
}

func (v NullableFPHSpedVAPIEnumsScreenshotState) Get() *FPHSpedVAPIEnumsScreenshotState {
	return v.value
}

func (v *NullableFPHSpedVAPIEnumsScreenshotState) Set(val *FPHSpedVAPIEnumsScreenshotState) {
	v.value = val
	v.isSet = true
}

func (v NullableFPHSpedVAPIEnumsScreenshotState) IsSet() bool {
	return v.isSet
}

func (v *NullableFPHSpedVAPIEnumsScreenshotState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFPHSpedVAPIEnumsScreenshotState(val *FPHSpedVAPIEnumsScreenshotState) *NullableFPHSpedVAPIEnumsScreenshotState {
	return &NullableFPHSpedVAPIEnumsScreenshotState{value: val, isSet: true}
}

func (v NullableFPHSpedVAPIEnumsScreenshotState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFPHSpedVAPIEnumsScreenshotState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

