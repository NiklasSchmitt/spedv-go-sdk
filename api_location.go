/*
SpedV API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// LocationAPIService LocationAPI service
type LocationAPIService service

type ApiV1LocationQueryGetRequest struct {
	ctx context.Context
	ApiService *LocationAPIService
	query string
}

func (r ApiV1LocationQueryGetRequest) Execute() (*BingMapsRESTToolkitLocation, *http.Response, error) {
	return r.ApiService.V1LocationQueryGetExecute(r)
}

/*
V1LocationQueryGet Method for V1LocationQueryGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param query
 @return ApiV1LocationQueryGetRequest
*/
func (a *LocationAPIService) V1LocationQueryGet(ctx context.Context, query string) ApiV1LocationQueryGetRequest {
	return ApiV1LocationQueryGetRequest{
		ApiService: a,
		ctx: ctx,
		query: query,
	}
}

// Execute executes the request
//  @return BingMapsRESTToolkitLocation
func (a *LocationAPIService) V1LocationQueryGetExecute(r ApiV1LocationQueryGetRequest) (*BingMapsRESTToolkitLocation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BingMapsRESTToolkitLocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocationAPIService.V1LocationQueryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/location/{query}"
	localVarPath = strings.Replace(localVarPath, "{"+"query"+"}", url.PathEscape(parameterValueToString(r.query, "query")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1LocationRealrouteStartCityIdDestinationCityIdGetRequest struct {
	ctx context.Context
	ApiService *LocationAPIService
	startCityId int32
	destinationCityId int32
}

func (r ApiV1LocationRealrouteStartCityIdDestinationCityIdGetRequest) Execute() (*FPHSpedVAPIObjectsMapsRealRoute, *http.Response, error) {
	return r.ApiService.V1LocationRealrouteStartCityIdDestinationCityIdGetExecute(r)
}

/*
V1LocationRealrouteStartCityIdDestinationCityIdGet Method for V1LocationRealrouteStartCityIdDestinationCityIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param startCityId
 @param destinationCityId
 @return ApiV1LocationRealrouteStartCityIdDestinationCityIdGetRequest
*/
func (a *LocationAPIService) V1LocationRealrouteStartCityIdDestinationCityIdGet(ctx context.Context, startCityId int32, destinationCityId int32) ApiV1LocationRealrouteStartCityIdDestinationCityIdGetRequest {
	return ApiV1LocationRealrouteStartCityIdDestinationCityIdGetRequest{
		ApiService: a,
		ctx: ctx,
		startCityId: startCityId,
		destinationCityId: destinationCityId,
	}
}

// Execute executes the request
//  @return FPHSpedVAPIObjectsMapsRealRoute
func (a *LocationAPIService) V1LocationRealrouteStartCityIdDestinationCityIdGetExecute(r ApiV1LocationRealrouteStartCityIdDestinationCityIdGetRequest) (*FPHSpedVAPIObjectsMapsRealRoute, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FPHSpedVAPIObjectsMapsRealRoute
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocationAPIService.V1LocationRealrouteStartCityIdDestinationCityIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/location/realroute/{startCityId}/{destinationCityId}"
	localVarPath = strings.Replace(localVarPath, "{"+"startCityId"+"}", url.PathEscape(parameterValueToString(r.startCityId, "startCityId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"destinationCityId"+"}", url.PathEscape(parameterValueToString(r.destinationCityId, "destinationCityId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1LocationScsmapDistanceStartBranchIdDestinationBranchIdGetRequest struct {
	ctx context.Context
	ApiService *LocationAPIService
	startBranchId int32
	destinationBranchId int32
}

func (r ApiV1LocationScsmapDistanceStartBranchIdDestinationBranchIdGetRequest) Execute() (*FPHSpedVAPIObjectsLiveSGMDistance, *http.Response, error) {
	return r.ApiService.V1LocationScsmapDistanceStartBranchIdDestinationBranchIdGetExecute(r)
}

/*
V1LocationScsmapDistanceStartBranchIdDestinationBranchIdGet Method for V1LocationScsmapDistanceStartBranchIdDestinationBranchIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param startBranchId
 @param destinationBranchId
 @return ApiV1LocationScsmapDistanceStartBranchIdDestinationBranchIdGetRequest
*/
func (a *LocationAPIService) V1LocationScsmapDistanceStartBranchIdDestinationBranchIdGet(ctx context.Context, startBranchId int32, destinationBranchId int32) ApiV1LocationScsmapDistanceStartBranchIdDestinationBranchIdGetRequest {
	return ApiV1LocationScsmapDistanceStartBranchIdDestinationBranchIdGetRequest{
		ApiService: a,
		ctx: ctx,
		startBranchId: startBranchId,
		destinationBranchId: destinationBranchId,
	}
}

// Execute executes the request
//  @return FPHSpedVAPIObjectsLiveSGMDistance
func (a *LocationAPIService) V1LocationScsmapDistanceStartBranchIdDestinationBranchIdGetExecute(r ApiV1LocationScsmapDistanceStartBranchIdDestinationBranchIdGetRequest) (*FPHSpedVAPIObjectsLiveSGMDistance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FPHSpedVAPIObjectsLiveSGMDistance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocationAPIService.V1LocationScsmapDistanceStartBranchIdDestinationBranchIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/location/scsmap/distance/{startBranchId}/{destinationBranchId}"
	localVarPath = strings.Replace(localVarPath, "{"+"startBranchId"+"}", url.PathEscape(parameterValueToString(r.startBranchId, "startBranchId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"destinationBranchId"+"}", url.PathEscape(parameterValueToString(r.destinationBranchId, "destinationBranchId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
