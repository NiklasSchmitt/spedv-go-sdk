/*
SpedV API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// TruckAPIService TruckAPI service
type TruckAPIService service

type ApiV1TrucksGetRequest struct {
	ctx context.Context
	ApiService *TruckAPIService
	includePartnerships *bool
}

func (r ApiV1TrucksGetRequest) IncludePartnerships(includePartnerships bool) ApiV1TrucksGetRequest {
	r.includePartnerships = &includePartnerships
	return r
}

func (r ApiV1TrucksGetRequest) Execute() ([]FPHSpedVAPIObjectsSpeditionsTruck, *http.Response, error) {
	return r.ApiService.V1TrucksGetExecute(r)
}

/*
V1TrucksGet Method for V1TrucksGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1TrucksGetRequest
*/
func (a *TruckAPIService) V1TrucksGet(ctx context.Context) ApiV1TrucksGetRequest {
	return ApiV1TrucksGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []FPHSpedVAPIObjectsSpeditionsTruck
func (a *TruckAPIService) V1TrucksGetExecute(r ApiV1TrucksGetRequest) ([]FPHSpedVAPIObjectsSpeditionsTruck, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []FPHSpedVAPIObjectsSpeditionsTruck
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TruckAPIService.V1TrucksGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/trucks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includePartnerships != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includePartnerships", r.includePartnerships, "")
	} else {
		var defaultValue bool = false
		r.includePartnerships = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1TrucksTruckidStatisticsGetRequest struct {
	ctx context.Context
	ApiService *TruckAPIService
	truckid int32
	startdate *time.Time
	enddate *time.Time
}

func (r ApiV1TrucksTruckidStatisticsGetRequest) Startdate(startdate time.Time) ApiV1TrucksTruckidStatisticsGetRequest {
	r.startdate = &startdate
	return r
}

func (r ApiV1TrucksTruckidStatisticsGetRequest) Enddate(enddate time.Time) ApiV1TrucksTruckidStatisticsGetRequest {
	r.enddate = &enddate
	return r
}

func (r ApiV1TrucksTruckidStatisticsGetRequest) Execute() (*FPHSpedVAPIObjectsSpeditionsTruckBranchStatistic, *http.Response, error) {
	return r.ApiService.V1TrucksTruckidStatisticsGetExecute(r)
}

/*
V1TrucksTruckidStatisticsGet Method for V1TrucksTruckidStatisticsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param truckid
 @return ApiV1TrucksTruckidStatisticsGetRequest
*/
func (a *TruckAPIService) V1TrucksTruckidStatisticsGet(ctx context.Context, truckid int32) ApiV1TrucksTruckidStatisticsGetRequest {
	return ApiV1TrucksTruckidStatisticsGetRequest{
		ApiService: a,
		ctx: ctx,
		truckid: truckid,
	}
}

// Execute executes the request
//  @return FPHSpedVAPIObjectsSpeditionsTruckBranchStatistic
func (a *TruckAPIService) V1TrucksTruckidStatisticsGetExecute(r ApiV1TrucksTruckidStatisticsGetRequest) (*FPHSpedVAPIObjectsSpeditionsTruckBranchStatistic, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FPHSpedVAPIObjectsSpeditionsTruckBranchStatistic
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TruckAPIService.V1TrucksTruckidStatisticsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/trucks/{truckid}/statistics"
	localVarPath = strings.Replace(localVarPath, "{"+"truckid"+"}", url.PathEscape(parameterValueToString(r.truckid, "truckid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startdate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startdate", r.startdate, "")
	}
	if r.enddate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enddate", r.enddate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1TrucktypesGetRequest struct {
	ctx context.Context
	ApiService *TruckAPIService
}

func (r ApiV1TrucktypesGetRequest) Execute() ([]FPHSpedVAPIObjectsSpeditionsTruckType, *http.Response, error) {
	return r.ApiService.V1TrucktypesGetExecute(r)
}

/*
V1TrucktypesGet Method for V1TrucktypesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1TrucktypesGetRequest
*/
func (a *TruckAPIService) V1TrucktypesGet(ctx context.Context) ApiV1TrucktypesGetRequest {
	return ApiV1TrucktypesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []FPHSpedVAPIObjectsSpeditionsTruckType
func (a *TruckAPIService) V1TrucktypesGetExecute(r ApiV1TrucktypesGetRequest) ([]FPHSpedVAPIObjectsSpeditionsTruckType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []FPHSpedVAPIObjectsSpeditionsTruckType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TruckAPIService.V1TrucktypesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/trucktypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
