/*
SpedV API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FPHSpedVAPIObjectsMapsCity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FPHSpedVAPIObjectsMapsCity{}

// FPHSpedVAPIObjectsMapsCity struct for FPHSpedVAPIObjectsMapsCity
type FPHSpedVAPIObjectsMapsCity struct {
	Id int32 `json:"id"`
	Name NullableString `json:"name"`
	VisibleName NullableString `json:"visibleName"`
	InGameNameDictionary map[string]string `json:"inGameNameDictionary"`
	Country NullableFPHSpedVAPIObjectsMapsCountry `json:"country"`
	RealWorldLati float64 `json:"realWorld_Lati"`
	RealWorldLong float64 `json:"realWorld_Long"`
	InGameNames []string `json:"inGameNames"`
}

type _FPHSpedVAPIObjectsMapsCity FPHSpedVAPIObjectsMapsCity

// NewFPHSpedVAPIObjectsMapsCity instantiates a new FPHSpedVAPIObjectsMapsCity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFPHSpedVAPIObjectsMapsCity(id int32, name NullableString, visibleName NullableString, inGameNameDictionary map[string]string, country NullableFPHSpedVAPIObjectsMapsCountry, realWorldLati float64, realWorldLong float64, inGameNames []string) *FPHSpedVAPIObjectsMapsCity {
	this := FPHSpedVAPIObjectsMapsCity{}
	this.Id = id
	this.Name = name
	this.VisibleName = visibleName
	this.InGameNameDictionary = inGameNameDictionary
	this.Country = country
	this.RealWorldLati = realWorldLati
	this.RealWorldLong = realWorldLong
	this.InGameNames = inGameNames
	return &this
}

// NewFPHSpedVAPIObjectsMapsCityWithDefaults instantiates a new FPHSpedVAPIObjectsMapsCity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFPHSpedVAPIObjectsMapsCityWithDefaults() *FPHSpedVAPIObjectsMapsCity {
	this := FPHSpedVAPIObjectsMapsCity{}
	return &this
}

// GetId returns the Id field value
func (o *FPHSpedVAPIObjectsMapsCity) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FPHSpedVAPIObjectsMapsCity) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FPHSpedVAPIObjectsMapsCity) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *FPHSpedVAPIObjectsMapsCity) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FPHSpedVAPIObjectsMapsCity) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *FPHSpedVAPIObjectsMapsCity) SetName(v string) {
	o.Name.Set(&v)
}

// GetVisibleName returns the VisibleName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *FPHSpedVAPIObjectsMapsCity) GetVisibleName() string {
	if o == nil || o.VisibleName.Get() == nil {
		var ret string
		return ret
	}

	return *o.VisibleName.Get()
}

// GetVisibleNameOk returns a tuple with the VisibleName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FPHSpedVAPIObjectsMapsCity) GetVisibleNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VisibleName.Get(), o.VisibleName.IsSet()
}

// SetVisibleName sets field value
func (o *FPHSpedVAPIObjectsMapsCity) SetVisibleName(v string) {
	o.VisibleName.Set(&v)
}

// GetInGameNameDictionary returns the InGameNameDictionary field value
// If the value is explicit nil, the zero value for map[string]string will be returned
func (o *FPHSpedVAPIObjectsMapsCity) GetInGameNameDictionary() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.InGameNameDictionary
}

// GetInGameNameDictionaryOk returns a tuple with the InGameNameDictionary field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FPHSpedVAPIObjectsMapsCity) GetInGameNameDictionaryOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.InGameNameDictionary) {
		return nil, false
	}
	return &o.InGameNameDictionary, true
}

// SetInGameNameDictionary sets field value
func (o *FPHSpedVAPIObjectsMapsCity) SetInGameNameDictionary(v map[string]string) {
	o.InGameNameDictionary = v
}

// GetCountry returns the Country field value
// If the value is explicit nil, the zero value for FPHSpedVAPIObjectsMapsCountry will be returned
func (o *FPHSpedVAPIObjectsMapsCity) GetCountry() FPHSpedVAPIObjectsMapsCountry {
	if o == nil || o.Country.Get() == nil {
		var ret FPHSpedVAPIObjectsMapsCountry
		return ret
	}

	return *o.Country.Get()
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FPHSpedVAPIObjectsMapsCity) GetCountryOk() (*FPHSpedVAPIObjectsMapsCountry, bool) {
	if o == nil {
		return nil, false
	}
	return o.Country.Get(), o.Country.IsSet()
}

// SetCountry sets field value
func (o *FPHSpedVAPIObjectsMapsCity) SetCountry(v FPHSpedVAPIObjectsMapsCountry) {
	o.Country.Set(&v)
}

// GetRealWorldLati returns the RealWorldLati field value
func (o *FPHSpedVAPIObjectsMapsCity) GetRealWorldLati() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.RealWorldLati
}

// GetRealWorldLatiOk returns a tuple with the RealWorldLati field value
// and a boolean to check if the value has been set.
func (o *FPHSpedVAPIObjectsMapsCity) GetRealWorldLatiOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RealWorldLati, true
}

// SetRealWorldLati sets field value
func (o *FPHSpedVAPIObjectsMapsCity) SetRealWorldLati(v float64) {
	o.RealWorldLati = v
}

// GetRealWorldLong returns the RealWorldLong field value
func (o *FPHSpedVAPIObjectsMapsCity) GetRealWorldLong() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.RealWorldLong
}

// GetRealWorldLongOk returns a tuple with the RealWorldLong field value
// and a boolean to check if the value has been set.
func (o *FPHSpedVAPIObjectsMapsCity) GetRealWorldLongOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RealWorldLong, true
}

// SetRealWorldLong sets field value
func (o *FPHSpedVAPIObjectsMapsCity) SetRealWorldLong(v float64) {
	o.RealWorldLong = v
}

// GetInGameNames returns the InGameNames field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *FPHSpedVAPIObjectsMapsCity) GetInGameNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.InGameNames
}

// GetInGameNamesOk returns a tuple with the InGameNames field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FPHSpedVAPIObjectsMapsCity) GetInGameNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.InGameNames) {
		return nil, false
	}
	return o.InGameNames, true
}

// SetInGameNames sets field value
func (o *FPHSpedVAPIObjectsMapsCity) SetInGameNames(v []string) {
	o.InGameNames = v
}

func (o FPHSpedVAPIObjectsMapsCity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FPHSpedVAPIObjectsMapsCity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name.Get()
	toSerialize["visibleName"] = o.VisibleName.Get()
	if o.InGameNameDictionary != nil {
		toSerialize["inGameNameDictionary"] = o.InGameNameDictionary
	}
	toSerialize["country"] = o.Country.Get()
	toSerialize["realWorld_Lati"] = o.RealWorldLati
	toSerialize["realWorld_Long"] = o.RealWorldLong
	if o.InGameNames != nil {
		toSerialize["inGameNames"] = o.InGameNames
	}
	return toSerialize, nil
}

func (o *FPHSpedVAPIObjectsMapsCity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"visibleName",
		"inGameNameDictionary",
		"country",
		"realWorld_Lati",
		"realWorld_Long",
		"inGameNames",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFPHSpedVAPIObjectsMapsCity := _FPHSpedVAPIObjectsMapsCity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFPHSpedVAPIObjectsMapsCity)

	if err != nil {
		return err
	}

	*o = FPHSpedVAPIObjectsMapsCity(varFPHSpedVAPIObjectsMapsCity)

	return err
}

type NullableFPHSpedVAPIObjectsMapsCity struct {
	value *FPHSpedVAPIObjectsMapsCity
	isSet bool
}

func (v NullableFPHSpedVAPIObjectsMapsCity) Get() *FPHSpedVAPIObjectsMapsCity {
	return v.value
}

func (v *NullableFPHSpedVAPIObjectsMapsCity) Set(val *FPHSpedVAPIObjectsMapsCity) {
	v.value = val
	v.isSet = true
}

func (v NullableFPHSpedVAPIObjectsMapsCity) IsSet() bool {
	return v.isSet
}

func (v *NullableFPHSpedVAPIObjectsMapsCity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFPHSpedVAPIObjectsMapsCity(val *FPHSpedVAPIObjectsMapsCity) *NullableFPHSpedVAPIObjectsMapsCity {
	return &NullableFPHSpedVAPIObjectsMapsCity{value: val, isSet: true}
}

func (v NullableFPHSpedVAPIObjectsMapsCity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFPHSpedVAPIObjectsMapsCity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


