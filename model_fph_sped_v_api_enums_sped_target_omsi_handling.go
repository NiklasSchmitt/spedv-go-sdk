/*
SpedV API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FPHSpedVAPIEnumsSpedTargetOMSIHandling   0 = AllTasks  1 = OnlyOMSITasks  2 = NoOMSITasks
type FPHSpedVAPIEnumsSpedTargetOMSIHandling int32

// List of FPH.SpedV.API.Enums.SpedTargetOMSIHandling
const (
	_0 FPHSpedVAPIEnumsSpedTargetOMSIHandling = 0
	_1 FPHSpedVAPIEnumsSpedTargetOMSIHandling = 1
	_2 FPHSpedVAPIEnumsSpedTargetOMSIHandling = 2
)

// All allowed values of FPHSpedVAPIEnumsSpedTargetOMSIHandling enum
var AllowedFPHSpedVAPIEnumsSpedTargetOMSIHandlingEnumValues = []FPHSpedVAPIEnumsSpedTargetOMSIHandling{
	0,
	1,
	2,
}

func (v *FPHSpedVAPIEnumsSpedTargetOMSIHandling) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FPHSpedVAPIEnumsSpedTargetOMSIHandling(value)
	for _, existing := range AllowedFPHSpedVAPIEnumsSpedTargetOMSIHandlingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FPHSpedVAPIEnumsSpedTargetOMSIHandling", value)
}

// NewFPHSpedVAPIEnumsSpedTargetOMSIHandlingFromValue returns a pointer to a valid FPHSpedVAPIEnumsSpedTargetOMSIHandling
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFPHSpedVAPIEnumsSpedTargetOMSIHandlingFromValue(v int32) (*FPHSpedVAPIEnumsSpedTargetOMSIHandling, error) {
	ev := FPHSpedVAPIEnumsSpedTargetOMSIHandling(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FPHSpedVAPIEnumsSpedTargetOMSIHandling: valid values are %v", v, AllowedFPHSpedVAPIEnumsSpedTargetOMSIHandlingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FPHSpedVAPIEnumsSpedTargetOMSIHandling) IsValid() bool {
	for _, existing := range AllowedFPHSpedVAPIEnumsSpedTargetOMSIHandlingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FPH.SpedV.API.Enums.SpedTargetOMSIHandling value
func (v FPHSpedVAPIEnumsSpedTargetOMSIHandling) Ptr() *FPHSpedVAPIEnumsSpedTargetOMSIHandling {
	return &v
}

type NullableFPHSpedVAPIEnumsSpedTargetOMSIHandling struct {
	value *FPHSpedVAPIEnumsSpedTargetOMSIHandling
	isSet bool
}

func (v NullableFPHSpedVAPIEnumsSpedTargetOMSIHandling) Get() *FPHSpedVAPIEnumsSpedTargetOMSIHandling {
	return v.value
}

func (v *NullableFPHSpedVAPIEnumsSpedTargetOMSIHandling) Set(val *FPHSpedVAPIEnumsSpedTargetOMSIHandling) {
	v.value = val
	v.isSet = true
}

func (v NullableFPHSpedVAPIEnumsSpedTargetOMSIHandling) IsSet() bool {
	return v.isSet
}

func (v *NullableFPHSpedVAPIEnumsSpedTargetOMSIHandling) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFPHSpedVAPIEnumsSpedTargetOMSIHandling(val *FPHSpedVAPIEnumsSpedTargetOMSIHandling) *NullableFPHSpedVAPIEnumsSpedTargetOMSIHandling {
	return &NullableFPHSpedVAPIEnumsSpedTargetOMSIHandling{value: val, isSet: true}
}

func (v NullableFPHSpedVAPIEnumsSpedTargetOMSIHandling) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFPHSpedVAPIEnumsSpedTargetOMSIHandling) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

