/*
SpedV API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FPHSpedVAPIEnumsGameEnum   0 = ETS2  1 = ATS  -1 = NotSet
type FPHSpedVAPIEnumsGameEnum int32

// List of FPH.SpedV.API.Enums.GameEnum
const (
	_0 FPHSpedVAPIEnumsGameEnum = 0
	_1 FPHSpedVAPIEnumsGameEnum = 1
	_MINUS_1 FPHSpedVAPIEnumsGameEnum = -1
)

// All allowed values of FPHSpedVAPIEnumsGameEnum enum
var AllowedFPHSpedVAPIEnumsGameEnumEnumValues = []FPHSpedVAPIEnumsGameEnum{
	0,
	1,
	-1,
}

func (v *FPHSpedVAPIEnumsGameEnum) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FPHSpedVAPIEnumsGameEnum(value)
	for _, existing := range AllowedFPHSpedVAPIEnumsGameEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FPHSpedVAPIEnumsGameEnum", value)
}

// NewFPHSpedVAPIEnumsGameEnumFromValue returns a pointer to a valid FPHSpedVAPIEnumsGameEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFPHSpedVAPIEnumsGameEnumFromValue(v int32) (*FPHSpedVAPIEnumsGameEnum, error) {
	ev := FPHSpedVAPIEnumsGameEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FPHSpedVAPIEnumsGameEnum: valid values are %v", v, AllowedFPHSpedVAPIEnumsGameEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FPHSpedVAPIEnumsGameEnum) IsValid() bool {
	for _, existing := range AllowedFPHSpedVAPIEnumsGameEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FPH.SpedV.API.Enums.GameEnum value
func (v FPHSpedVAPIEnumsGameEnum) Ptr() *FPHSpedVAPIEnumsGameEnum {
	return &v
}

type NullableFPHSpedVAPIEnumsGameEnum struct {
	value *FPHSpedVAPIEnumsGameEnum
	isSet bool
}

func (v NullableFPHSpedVAPIEnumsGameEnum) Get() *FPHSpedVAPIEnumsGameEnum {
	return v.value
}

func (v *NullableFPHSpedVAPIEnumsGameEnum) Set(val *FPHSpedVAPIEnumsGameEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableFPHSpedVAPIEnumsGameEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableFPHSpedVAPIEnumsGameEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFPHSpedVAPIEnumsGameEnum(val *FPHSpedVAPIEnumsGameEnum) *NullableFPHSpedVAPIEnumsGameEnum {
	return &NullableFPHSpedVAPIEnumsGameEnum{value: val, isSet: true}
}

func (v NullableFPHSpedVAPIEnumsGameEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFPHSpedVAPIEnumsGameEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

